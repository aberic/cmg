// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: tbft.proto

package tbft

import (
	pb "chainmaker.org/chainmaker-go/pb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TBFTMsgType defines different type message in tbft
type TBFTMsgType int32

const (
	TBFTMsgType_propose   TBFTMsgType = 0
	TBFTMsgType_prevote   TBFTMsgType = 1
	TBFTMsgType_precommit TBFTMsgType = 2
	TBFTMsgType_state     TBFTMsgType = 3
)

// Enum value maps for TBFTMsgType.
var (
	TBFTMsgType_name = map[int32]string{
		0: "propose",
		1: "prevote",
		2: "precommit",
		3: "state",
	}
	TBFTMsgType_value = map[string]int32{
		"propose":   0,
		"prevote":   1,
		"precommit": 2,
		"state":     3,
	}
)

func (x TBFTMsgType) Enum() *TBFTMsgType {
	p := new(TBFTMsgType)
	*p = x
	return p
}

func (x TBFTMsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TBFTMsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_tbft_proto_enumTypes[0].Descriptor()
}

func (TBFTMsgType) Type() protoreflect.EnumType {
	return &file_tbft_proto_enumTypes[0]
}

func (x TBFTMsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TBFTMsgType.Descriptor instead.
func (TBFTMsgType) EnumDescriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{0}
}

// VoteType represents the type of vote
type VoteType int32

const (
	VoteType_VotePrevote   VoteType = 0
	VoteType_VotePrecommit VoteType = 1
)

// Enum value maps for VoteType.
var (
	VoteType_name = map[int32]string{
		0: "VotePrevote",
		1: "VotePrecommit",
	}
	VoteType_value = map[string]int32{
		"VotePrevote":   0,
		"VotePrecommit": 1,
	}
)

func (x VoteType) Enum() *VoteType {
	p := new(VoteType)
	*p = x
	return p
}

func (x VoteType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteType) Descriptor() protoreflect.EnumDescriptor {
	return file_tbft_proto_enumTypes[1].Descriptor()
}

func (VoteType) Type() protoreflect.EnumType {
	return &file_tbft_proto_enumTypes[1]
}

func (x VoteType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteType.Descriptor instead.
func (VoteType) EnumDescriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{1}
}

// Step represents the step in a round
type Step int32

const (
	Step_NewHeight     Step = 0
	Step_NewRound      Step = 1
	Step_Propose       Step = 2
	Step_Prevote       Step = 3
	Step_PrevoteWait   Step = 4
	Step_Precommit     Step = 5
	Step_PrecommitWait Step = 6
	Step_Commit        Step = 7
)

// Enum value maps for Step.
var (
	Step_name = map[int32]string{
		0: "NewHeight",
		1: "NewRound",
		2: "Propose",
		3: "Prevote",
		4: "PrevoteWait",
		5: "Precommit",
		6: "PrecommitWait",
		7: "Commit",
	}
	Step_value = map[string]int32{
		"NewHeight":     0,
		"NewRound":      1,
		"Propose":       2,
		"Prevote":       3,
		"PrevoteWait":   4,
		"Precommit":     5,
		"PrecommitWait": 6,
		"Commit":        7,
	}
)

func (x Step) Enum() *Step {
	p := new(Step)
	*p = x
	return p
}

func (x Step) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Step) Descriptor() protoreflect.EnumDescriptor {
	return file_tbft_proto_enumTypes[2].Descriptor()
}

func (Step) Type() protoreflect.EnumType {
	return &file_tbft_proto_enumTypes[2]
}

func (x Step) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Step.Descriptor instead.
func (Step) EnumDescriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{2}
}

// ValidatorSet represents the set of validators
type ValidatorSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Validators []string `protobuf:"bytes,1,rep,name=validators,proto3" json:"validators,omitempty"`
}

func (x *ValidatorSet) Reset() {
	*x = ValidatorSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorSet) ProtoMessage() {}

func (x *ValidatorSet) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorSet.ProtoReflect.Descriptor instead.
func (*ValidatorSet) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{0}
}

func (x *ValidatorSet) GetValidators() []string {
	if x != nil {
		return x.Validators
	}
	return nil
}

type TBFTMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type TBFTMsgType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.TBFTMsgType" json:"type,omitempty"`
	Msg  []byte      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *TBFTMsg) Reset() {
	*x = TBFTMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TBFTMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TBFTMsg) ProtoMessage() {}

func (x *TBFTMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TBFTMsg.ProtoReflect.Descriptor instead.
func (*TBFTMsg) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{1}
}

func (x *TBFTMsg) GetType() TBFTMsgType {
	if x != nil {
		return x.Type
	}
	return TBFTMsgType_propose
}

func (x *TBFTMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

// Proposal defined a consesensus proposal which can
// be gossiped to other node and can be serilized
// for persistent store.
type Proposal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Voter       string               `protobuf:"bytes,1,opt,name=voter,proto3" json:"voter,omitempty"`
	Height      int64                `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Round       int32                `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	PolRound    int32                `protobuf:"varint,4,opt,name=pol_round,json=polRound,proto3" json:"pol_round,omitempty"`
	Block       *pb.Block            `protobuf:"bytes,5,opt,name=block,proto3" json:"block,omitempty"`
	Endorsement *pb.EndorsementEntry `protobuf:"bytes,6,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
}

func (x *Proposal) Reset() {
	*x = Proposal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proposal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proposal) ProtoMessage() {}

func (x *Proposal) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proposal.ProtoReflect.Descriptor instead.
func (*Proposal) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{2}
}

func (x *Proposal) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *Proposal) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Proposal) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Proposal) GetPolRound() int32 {
	if x != nil {
		return x.PolRound
	}
	return 0
}

func (x *Proposal) GetBlock() *pb.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *Proposal) GetEndorsement() *pb.EndorsementEntry {
	if x != nil {
		return x.Endorsement
	}
	return nil
}

// Vote represents a tbft vote
type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        VoteType             `protobuf:"varint,1,opt,name=type,proto3,enum=pb.VoteType" json:"type,omitempty"`
	Voter       string               `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Height      int64                `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	Round       int32                `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	Hash        []byte               `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Endorsement *pb.EndorsementEntry `protobuf:"bytes,6,opt,name=endorsement,proto3" json:"endorsement,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{3}
}

func (x *Vote) GetType() VoteType {
	if x != nil {
		return x.Type
	}
	return VoteType_VotePrevote
}

func (x *Vote) GetVoter() string {
	if x != nil {
		return x.Voter
	}
	return ""
}

func (x *Vote) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Vote) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *Vote) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Vote) GetEndorsement() *pb.EndorsementEntry {
	if x != nil {
		return x.Endorsement
	}
	return nil
}

// BlockVotes represents votes as key-value form
type BlockVotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Votes map[string]*Vote `protobuf:"bytes,1,rep,name=votes,proto3" json:"votes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Sum   int64            `protobuf:"varint,2,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (x *BlockVotes) Reset() {
	*x = BlockVotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockVotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockVotes) ProtoMessage() {}

func (x *BlockVotes) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockVotes.ProtoReflect.Descriptor instead.
func (*BlockVotes) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{4}
}

func (x *BlockVotes) GetVotes() map[string]*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *BlockVotes) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

// VoteSet represents a set of vote at `height` and `round`
type VoteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         VoteType               `protobuf:"varint,1,opt,name=type,proto3,enum=pb.VoteType" json:"type,omitempty"`
	Height       int64                  `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Round        int32                  `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`
	Sum          int64                  `protobuf:"varint,4,opt,name=sum,proto3" json:"sum,omitempty"`
	Maj23        []byte                 `protobuf:"bytes,5,opt,name=maj23,proto3" json:"maj23,omitempty"`
	Votes        map[string]*Vote       `protobuf:"bytes,6,rep,name=votes,proto3" json:"votes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	VotesByBlock map[string]*BlockVotes `protobuf:"bytes,7,rep,name=votes_by_block,json=votesByBlock,proto3" json:"votes_by_block,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *VoteSet) Reset() {
	*x = VoteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteSet) ProtoMessage() {}

func (x *VoteSet) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteSet.ProtoReflect.Descriptor instead.
func (*VoteSet) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{5}
}

func (x *VoteSet) GetType() VoteType {
	if x != nil {
		return x.Type
	}
	return VoteType_VotePrevote
}

func (x *VoteSet) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *VoteSet) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *VoteSet) GetSum() int64 {
	if x != nil {
		return x.Sum
	}
	return 0
}

func (x *VoteSet) GetMaj23() []byte {
	if x != nil {
		return x.Maj23
	}
	return nil
}

func (x *VoteSet) GetVotes() map[string]*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *VoteSet) GetVotesByBlock() map[string]*BlockVotes {
	if x != nil {
		return x.VotesByBlock
	}
	return nil
}

// RoundVoteSet represents voteSet of a `round`
type RoundVoteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height     int64    `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round      int32    `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"`
	Prevotes   *VoteSet `protobuf:"bytes,3,opt,name=prevotes,proto3" json:"prevotes,omitempty"`
	Precommits *VoteSet `protobuf:"bytes,4,opt,name=precommits,proto3" json:"precommits,omitempty"`
}

func (x *RoundVoteSet) Reset() {
	*x = RoundVoteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoundVoteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoundVoteSet) ProtoMessage() {}

func (x *RoundVoteSet) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoundVoteSet.ProtoReflect.Descriptor instead.
func (*RoundVoteSet) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{6}
}

func (x *RoundVoteSet) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *RoundVoteSet) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *RoundVoteSet) GetPrevotes() *VoteSet {
	if x != nil {
		return x.Prevotes
	}
	return nil
}

func (x *RoundVoteSet) GetPrecommits() *VoteSet {
	if x != nil {
		return x.Precommits
	}
	return nil
}

// HeightRoundVoteSet represents voteSet of a `height`
type HeightRoundVoteSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height        int64                   `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Round         int32                   `protobuf:"varint,2,opt,name=round,proto3" json:"round,omitempty"` // max round
	RoundVoteSets map[int32]*RoundVoteSet `protobuf:"bytes,3,rep,name=roundVoteSets,proto3" json:"roundVoteSets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *HeightRoundVoteSet) Reset() {
	*x = HeightRoundVoteSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeightRoundVoteSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeightRoundVoteSet) ProtoMessage() {}

func (x *HeightRoundVoteSet) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeightRoundVoteSet.ProtoReflect.Descriptor instead.
func (*HeightRoundVoteSet) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{7}
}

func (x *HeightRoundVoteSet) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *HeightRoundVoteSet) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *HeightRoundVoteSet) GetRoundVoteSets() map[int32]*RoundVoteSet {
	if x != nil {
		return x.RoundVoteSets
	}
	return nil
}

// ConsensusState represents the state of tbft instance
type ConsensusState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Height             int64               `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Round              int32               `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"`            // max round
	Step               Step                `protobuf:"varint,4,opt,name=step,proto3,enum=pb.Step" json:"step,omitempty"` // step
	Proposal           *Proposal           `protobuf:"bytes,5,opt,name=proposal,proto3" json:"proposal,omitempty"`
	VerifingProposal   *Proposal           `protobuf:"bytes,6,opt,name=verifing_proposal,json=verifingProposal,proto3" json:"verifing_proposal,omitempty"`
	LockedProposal     *Proposal           `protobuf:"bytes,7,opt,name=locked_proposal,json=lockedProposal,proto3" json:"locked_proposal,omitempty"`
	ValidProposal      *Proposal           `protobuf:"bytes,8,opt,name=valid_proposal,json=validProposal,proto3" json:"valid_proposal,omitempty"`
	HeightRoundVoteSet *HeightRoundVoteSet `protobuf:"bytes,9,opt,name=height_round_vote_set,json=heightRoundVoteSet,proto3" json:"height_round_vote_set,omitempty"`
}

func (x *ConsensusState) Reset() {
	*x = ConsensusState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tbft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusState) ProtoMessage() {}

func (x *ConsensusState) ProtoReflect() protoreflect.Message {
	mi := &file_tbft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusState.ProtoReflect.Descriptor instead.
func (*ConsensusState) Descriptor() ([]byte, []int) {
	return file_tbft_proto_rawDescGZIP(), []int{8}
}

func (x *ConsensusState) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsensusState) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ConsensusState) GetRound() int32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *ConsensusState) GetStep() Step {
	if x != nil {
		return x.Step
	}
	return Step_NewHeight
}

func (x *ConsensusState) GetProposal() *Proposal {
	if x != nil {
		return x.Proposal
	}
	return nil
}

func (x *ConsensusState) GetVerifingProposal() *Proposal {
	if x != nil {
		return x.VerifingProposal
	}
	return nil
}

func (x *ConsensusState) GetLockedProposal() *Proposal {
	if x != nil {
		return x.LockedProposal
	}
	return nil
}

func (x *ConsensusState) GetValidProposal() *Proposal {
	if x != nil {
		return x.ValidProposal
	}
	return nil
}

func (x *ConsensusState) GetHeightRoundVoteSet() *HeightRoundVoteSet {
	if x != nil {
		return x.HeightRoundVoteSet
	}
	return nil
}

var File_tbft_proto protoreflect.FileDescriptor

var file_tbft_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62,
	0x1a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2e, 0x0a, 0x0c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x22, 0x40, 0x0a, 0x07,
	0x54, 0x42, 0x46, 0x54, 0x4d, 0x73, 0x67, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x42, 0x46, 0x54, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xc4,
	0x01, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x6f, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x36, 0x0a,
	0x0b, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x36, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x93, 0x01, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x73,
	0x75, 0x6d, 0x1a, 0x42, 0x0a, 0x0a, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x1e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x89, 0x03, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x53,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x73, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x32, 0x33, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x6d, 0x61, 0x6a, 0x32, 0x33, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x6f, 0x74, 0x65,
	0x73, 0x5f, 0x62, 0x79, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x56, 0x6f,
	0x74, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x1a, 0x42, 0x0a,
	0x0a, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1e, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x70,
	0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x4f, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x92, 0x01, 0x0a, 0x0c, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x52, 0x08, 0x70, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x0a, 0x70, 0x72,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x0a, 0x70, 0x72, 0x65,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x12, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4f, 0x0a, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2e, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x52, 0x0a,
	0x12, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x88, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x08, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x04, 0x73, 0x74, 0x65, 0x70,
	0x12, 0x28, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x11, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x52, 0x10, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x0e, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x12, 0x49, 0x0a, 0x15, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x52, 0x12, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x74, 0x2a, 0x41, 0x0a, 0x0b,
	0x54, 0x42, 0x46, 0x54, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76,
	0x6f, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x2a,
	0x2e, 0x0a, 0x08, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x56,
	0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x01, 0x2a,
	0x7c, 0x0a, 0x04, 0x53, 0x74, 0x65, 0x70, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x10, 0x03, 0x12, 0x0f,
	0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x05, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x57, 0x61, 0x69, 0x74, 0x10,
	0x06, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x07, 0x42, 0x26, 0x5a,
	0x24, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62,
	0x2f, 0x74, 0x62, 0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tbft_proto_rawDescOnce sync.Once
	file_tbft_proto_rawDescData = file_tbft_proto_rawDesc
)

func file_tbft_proto_rawDescGZIP() []byte {
	file_tbft_proto_rawDescOnce.Do(func() {
		file_tbft_proto_rawDescData = protoimpl.X.CompressGZIP(file_tbft_proto_rawDescData)
	})
	return file_tbft_proto_rawDescData
}

var file_tbft_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tbft_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_tbft_proto_goTypes = []interface{}{
	(TBFTMsgType)(0),            // 0: pb.TBFTMsgType
	(VoteType)(0),               // 1: pb.VoteType
	(Step)(0),                   // 2: pb.Step
	(*ValidatorSet)(nil),        // 3: pb.ValidatorSet
	(*TBFTMsg)(nil),             // 4: pb.TBFTMsg
	(*Proposal)(nil),            // 5: pb.Proposal
	(*Vote)(nil),                // 6: pb.Vote
	(*BlockVotes)(nil),          // 7: pb.BlockVotes
	(*VoteSet)(nil),             // 8: pb.VoteSet
	(*RoundVoteSet)(nil),        // 9: pb.RoundVoteSet
	(*HeightRoundVoteSet)(nil),  // 10: pb.HeightRoundVoteSet
	(*ConsensusState)(nil),      // 11: pb.ConsensusState
	nil,                         // 12: pb.BlockVotes.VotesEntry
	nil,                         // 13: pb.VoteSet.VotesEntry
	nil,                         // 14: pb.VoteSet.VotesByBlockEntry
	nil,                         // 15: pb.HeightRoundVoteSet.RoundVoteSetsEntry
	(*pb.Block)(nil),            // 16: pb.Block
	(*pb.EndorsementEntry)(nil), // 17: pb.EndorsementEntry
}
var file_tbft_proto_depIdxs = []int32{
	0,  // 0: pb.TBFTMsg.type:type_name -> pb.TBFTMsgType
	16, // 1: pb.Proposal.block:type_name -> pb.Block
	17, // 2: pb.Proposal.endorsement:type_name -> pb.EndorsementEntry
	1,  // 3: pb.Vote.type:type_name -> pb.VoteType
	17, // 4: pb.Vote.endorsement:type_name -> pb.EndorsementEntry
	12, // 5: pb.BlockVotes.votes:type_name -> pb.BlockVotes.VotesEntry
	1,  // 6: pb.VoteSet.type:type_name -> pb.VoteType
	13, // 7: pb.VoteSet.votes:type_name -> pb.VoteSet.VotesEntry
	14, // 8: pb.VoteSet.votes_by_block:type_name -> pb.VoteSet.VotesByBlockEntry
	8,  // 9: pb.RoundVoteSet.prevotes:type_name -> pb.VoteSet
	8,  // 10: pb.RoundVoteSet.precommits:type_name -> pb.VoteSet
	15, // 11: pb.HeightRoundVoteSet.roundVoteSets:type_name -> pb.HeightRoundVoteSet.RoundVoteSetsEntry
	2,  // 12: pb.ConsensusState.step:type_name -> pb.Step
	5,  // 13: pb.ConsensusState.proposal:type_name -> pb.Proposal
	5,  // 14: pb.ConsensusState.verifing_proposal:type_name -> pb.Proposal
	5,  // 15: pb.ConsensusState.locked_proposal:type_name -> pb.Proposal
	5,  // 16: pb.ConsensusState.valid_proposal:type_name -> pb.Proposal
	10, // 17: pb.ConsensusState.height_round_vote_set:type_name -> pb.HeightRoundVoteSet
	6,  // 18: pb.BlockVotes.VotesEntry.value:type_name -> pb.Vote
	6,  // 19: pb.VoteSet.VotesEntry.value:type_name -> pb.Vote
	7,  // 20: pb.VoteSet.VotesByBlockEntry.value:type_name -> pb.BlockVotes
	9,  // 21: pb.HeightRoundVoteSet.RoundVoteSetsEntry.value:type_name -> pb.RoundVoteSet
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_tbft_proto_init() }
func file_tbft_proto_init() {
	if File_tbft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tbft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TBFTMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proposal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockVotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoundVoteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeightRoundVoteSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tbft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tbft_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_tbft_proto_goTypes,
		DependencyIndexes: file_tbft_proto_depIdxs,
		EnumInfos:         file_tbft_proto_enumTypes,
		MessageInfos:      file_tbft_proto_msgTypes,
	}.Build()
	File_tbft_proto = out.File
	file_tbft_proto_rawDesc = nil
	file_tbft_proto_goTypes = nil
	file_tbft_proto_depIdxs = nil
}
