// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: result.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// TxStatusCode describes the tx status in tx result
type TxStatusCode int32

const (
	TxStatusCode_SUCCESS                                   TxStatusCode = 0
	TxStatusCode_TIMEOUT                                   TxStatusCode = 1
	TxStatusCode_INVALID_PARAMETER                         TxStatusCode = 2
	TxStatusCode_NO_PERMISSION                             TxStatusCode = 3
	TxStatusCode_CONTRACT_FAIL                             TxStatusCode = 4
	TxStatusCode_INTERNAL_ERROR                            TxStatusCode = 5
	TxStatusCode_INVALID_CONTRACT_TRANSACTION_TYPE         TxStatusCode = 10
	TxStatusCode_INVALID_CONTRACT_PARAMETER_CONTRACT_NAME  TxStatusCode = 11
	TxStatusCode_INVALID_CONTRACT_PARAMETER_METHOD         TxStatusCode = 12
	TxStatusCode_INVALID_CONTRACT_PARAMETER_INIT_METHOD    TxStatusCode = 13
	TxStatusCode_INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD TxStatusCode = 14
	TxStatusCode_INVALID_CONTRACT_PARAMETER_BYTE_CODE      TxStatusCode = 15
	TxStatusCode_INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE   TxStatusCode = 16
	TxStatusCode_INVALID_CONTRACT_PARAMETER_VERSION        TxStatusCode = 17
	TxStatusCode_FAILED_GET_FROM_TX_CONTEXT                TxStatusCode = 20
	TxStatusCode_FAILED_PUT_INTO_TX_CONTEXT                TxStatusCode = 21
	TxStatusCode_FAILED_CONTRACT_VERSION_EXIST             TxStatusCode = 22
	TxStatusCode_FAILED_CONTRACT_VERSION_NOT_EXIST         TxStatusCode = 23
	TxStatusCode_FAILED_CONTRACT_BYTE_CODE_NOT_EXIST       TxStatusCode = 24
	TxStatusCode_FAILED_MARSHAL_SENDER                     TxStatusCode = 25
	TxStatusCode_FAILED_INVOKE_INIT_METHOD                 TxStatusCode = 26
	TxStatusCode_FAILED_INVOKE_UPGRADE_METHOD              TxStatusCode = 27
	TxStatusCode_FAILED_CREATE_RUNTIME_INSTANCE            TxStatusCode = 28
	TxStatusCode_FAILED_UNMARSHAL_CREATOR                  TxStatusCode = 29
	TxStatusCode_FAILED_UNMARSHAL_SENDER                   TxStatusCode = 30
	TxStatusCode_FAILED_GET_SENDER_PK                      TxStatusCode = 31
	TxStatusCode_FAILED_GET_CREATOR_PK                     TxStatusCode = 32
	TxStatusCode_FAILED_GET_CREATOR                        TxStatusCode = 33
	TxStatusCode_FAILED_GET_CREATOR_CERT                   TxStatusCode = 34
	TxStatusCode_FAILED_GET_SENDER_CERT                    TxStatusCode = 35
	TxStatusCode_FAILED_CONTRACT_FREEZE                    TxStatusCode = 36
	TxStatusCode_FAILED_CONTRACT_TOO_DEEP                  TxStatusCode = 37
	TxStatusCode_FAILED_CONTRACT_REVOKE                    TxStatusCode = 38
	TxStatusCode_FAILED_CONTRACT_INVOKE_METHOD             TxStatusCode = 39
)

// Enum value maps for TxStatusCode.
var (
	TxStatusCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "TIMEOUT",
		2:  "INVALID_PARAMETER",
		3:  "NO_PERMISSION",
		4:  "CONTRACT_FAIL",
		5:  "INTERNAL_ERROR",
		10: "INVALID_CONTRACT_TRANSACTION_TYPE",
		11: "INVALID_CONTRACT_PARAMETER_CONTRACT_NAME",
		12: "INVALID_CONTRACT_PARAMETER_METHOD",
		13: "INVALID_CONTRACT_PARAMETER_INIT_METHOD",
		14: "INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD",
		15: "INVALID_CONTRACT_PARAMETER_BYTE_CODE",
		16: "INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE",
		17: "INVALID_CONTRACT_PARAMETER_VERSION",
		20: "FAILED_GET_FROM_TX_CONTEXT",
		21: "FAILED_PUT_INTO_TX_CONTEXT",
		22: "FAILED_CONTRACT_VERSION_EXIST",
		23: "FAILED_CONTRACT_VERSION_NOT_EXIST",
		24: "FAILED_CONTRACT_BYTE_CODE_NOT_EXIST",
		25: "FAILED_MARSHAL_SENDER",
		26: "FAILED_INVOKE_INIT_METHOD",
		27: "FAILED_INVOKE_UPGRADE_METHOD",
		28: "FAILED_CREATE_RUNTIME_INSTANCE",
		29: "FAILED_UNMARSHAL_CREATOR",
		30: "FAILED_UNMARSHAL_SENDER",
		31: "FAILED_GET_SENDER_PK",
		32: "FAILED_GET_CREATOR_PK",
		33: "FAILED_GET_CREATOR",
		34: "FAILED_GET_CREATOR_CERT",
		35: "FAILED_GET_SENDER_CERT",
		36: "FAILED_CONTRACT_FREEZE",
		37: "FAILED_CONTRACT_TOO_DEEP",
		38: "FAILED_CONTRACT_REVOKE",
		39: "FAILED_CONTRACT_INVOKE_METHOD",
	}
	TxStatusCode_value = map[string]int32{
		"SUCCESS":                           0,
		"TIMEOUT":                           1,
		"INVALID_PARAMETER":                 2,
		"NO_PERMISSION":                     3,
		"CONTRACT_FAIL":                     4,
		"INTERNAL_ERROR":                    5,
		"INVALID_CONTRACT_TRANSACTION_TYPE": 10,
		"INVALID_CONTRACT_PARAMETER_CONTRACT_NAME":  11,
		"INVALID_CONTRACT_PARAMETER_METHOD":         12,
		"INVALID_CONTRACT_PARAMETER_INIT_METHOD":    13,
		"INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD": 14,
		"INVALID_CONTRACT_PARAMETER_BYTE_CODE":      15,
		"INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE":   16,
		"INVALID_CONTRACT_PARAMETER_VERSION":        17,
		"FAILED_GET_FROM_TX_CONTEXT":                20,
		"FAILED_PUT_INTO_TX_CONTEXT":                21,
		"FAILED_CONTRACT_VERSION_EXIST":             22,
		"FAILED_CONTRACT_VERSION_NOT_EXIST":         23,
		"FAILED_CONTRACT_BYTE_CODE_NOT_EXIST":       24,
		"FAILED_MARSHAL_SENDER":                     25,
		"FAILED_INVOKE_INIT_METHOD":                 26,
		"FAILED_INVOKE_UPGRADE_METHOD":              27,
		"FAILED_CREATE_RUNTIME_INSTANCE":            28,
		"FAILED_UNMARSHAL_CREATOR":                  29,
		"FAILED_UNMARSHAL_SENDER":                   30,
		"FAILED_GET_SENDER_PK":                      31,
		"FAILED_GET_CREATOR_PK":                     32,
		"FAILED_GET_CREATOR":                        33,
		"FAILED_GET_CREATOR_CERT":                   34,
		"FAILED_GET_SENDER_CERT":                    35,
		"FAILED_CONTRACT_FREEZE":                    36,
		"FAILED_CONTRACT_TOO_DEEP":                  37,
		"FAILED_CONTRACT_REVOKE":                    38,
		"FAILED_CONTRACT_INVOKE_METHOD":             39,
	}
)

func (x TxStatusCode) Enum() *TxStatusCode {
	p := new(TxStatusCode)
	*p = x
	return p
}

func (x TxStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[0].Descriptor()
}

func (TxStatusCode) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[0]
}

func (x TxStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatusCode.Descriptor instead.
func (TxStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

// returned by contract
type ContractResultCode int32

const (
	ContractResultCode_OK   ContractResultCode = 0
	ContractResultCode_FAIL ContractResultCode = 1
)

// Enum value maps for ContractResultCode.
var (
	ContractResultCode_name = map[int32]string{
		0: "OK",
		1: "FAIL",
	}
	ContractResultCode_value = map[string]int32{
		"OK":   0,
		"FAIL": 1,
	}
)

func (x ContractResultCode) Enum() *ContractResultCode {
	p := new(ContractResultCode)
	*p = x
	return p
}

func (x ContractResultCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractResultCode) Descriptor() protoreflect.EnumDescriptor {
	return file_result_proto_enumTypes[1].Descriptor()
}

func (ContractResultCode) Type() protoreflect.EnumType {
	return &file_result_proto_enumTypes[1]
}

func (x ContractResultCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractResultCode.Descriptor instead.
func (ContractResultCode) EnumDescriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

// tx request - tx response, only for RPC response
type TxResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response code
	Code TxStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=pb.TxStatusCode" json:"code,omitempty"`
	// response message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// returned data, set in smart contract
	ContractResult *ContractResult `protobuf:"bytes,3,opt,name=contract_result,json=contractResult,proto3" json:"contract_result,omitempty"`
}

func (x *TxResponse) Reset() {
	*x = TxResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxResponse) ProtoMessage() {}

func (x *TxResponse) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxResponse.ProtoReflect.Descriptor instead.
func (*TxResponse) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{0}
}

func (x *TxResponse) GetCode() TxStatusCode {
	if x != nil {
		return x.Code
	}
	return TxStatusCode_SUCCESS
}

func (x *TxResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TxResponse) GetContractResult() *ContractResult {
	if x != nil {
		return x.ContractResult
	}
	return nil
}

type SubscribeResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 当TxType为SUBSCRIBE_BLOCK_INFO, 解析为：pb.BlockInfo
	// 当TxType为SUBSCRIBE_TX_INFO，解析为：pb.Transaction
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SubscribeResult) Reset() {
	*x = SubscribeResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResult) ProtoMessage() {}

func (x *SubscribeResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResult.ProtoReflect.Descriptor instead.
func (*SubscribeResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{1}
}

func (x *SubscribeResult) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// tx result, part of a transaction in block
type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// response code
	Code TxStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=pb.TxStatusCode" json:"code,omitempty"`
	// returned data, set in smart contract
	ContractResult *ContractResult `protobuf:"bytes,2,opt,name=contract_result,json=contractResult,proto3" json:"contract_result,omitempty"`
	// hash of the transaction's read-write set
	RwSetHash []byte `protobuf:"bytes,3,opt,name=rw_set_hash,json=rwSetHash,proto3" json:"rw_set_hash,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetCode() TxStatusCode {
	if x != nil {
		return x.Code
	}
	return TxStatusCode_SUCCESS
}

func (x *Result) GetContractResult() *ContractResult {
	if x != nil {
		return x.ContractResult
	}
	return nil
}

func (x *Result) GetRwSetHash() []byte {
	if x != nil {
		return x.RwSetHash
	}
	return nil
}

// invoke user contract method return UserContractReturnPayload
// Unmarshal from TransactResult.TxResponse.payload
type ContractResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// user contract defined return code, 0-ok, 1-error. for example, insufficient balance in token transfer
	Code ContractResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=pb.ContractResultCode" json:"code,omitempty"`
	// user contract defined result
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// user contract defined result message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// gas used by current contract(include contract call)
	GasUsed int64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (x *ContractResult) Reset() {
	*x = ContractResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractResult) ProtoMessage() {}

func (x *ContractResult) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractResult.ProtoReflect.Descriptor instead.
func (*ContractResult) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{3}
}

func (x *ContractResult) GetCode() ContractResultCode {
	if x != nil {
		return x.Code
	}
	return ContractResultCode_OK
}

func (x *ContractResult) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ContractResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ContractResult) GetGasUsed() int64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

// 证书集合
type CertInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertInfos []*CertInfo `protobuf:"bytes,1,rep,name=cert_infos,json=certInfos,proto3" json:"cert_infos,omitempty"`
}

func (x *CertInfos) Reset() {
	*x = CertInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfos) ProtoMessage() {}

func (x *CertInfos) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfos.ProtoReflect.Descriptor instead.
func (*CertInfos) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{4}
}

func (x *CertInfos) GetCertInfos() []*CertInfo {
	if x != nil {
		return x.CertInfos
	}
	return nil
}

// 证书内容
type CertInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // 证书Hash
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"` // 证书内容
}

func (x *CertInfo) Reset() {
	*x = CertInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertInfo) ProtoMessage() {}

func (x *CertInfo) ProtoReflect() protoreflect.Message {
	mi := &file_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertInfo.ProtoReflect.Descriptor instead.
func (*CertInfo) Descriptor() ([]byte, []int) {
	return file_result_proto_rawDescGZIP(), []int{5}
}

func (x *CertInfo) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *CertInfo) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

var File_result_proto protoreflect.FileDescriptor

var file_result_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x22, 0x89, 0x01, 0x0a, 0x0a, 0x54, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x25,
	0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8b, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x24, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x77, 0x5f, 0x73, 0x65, 0x74, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x77, 0x53, 0x65, 0x74, 0x48,
	0x61, 0x73, 0x68, 0x22, 0x89, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x22,
	0x38, 0x0a, 0x09, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2b, 0x0a, 0x0a,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x63, 0x65, 0x72, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x22, 0x32, 0x0a, 0x08, 0x43, 0x65, 0x72,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x2a, 0xbc, 0x08,
	0x0a, 0x0c, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54,
	0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x0a,
	0x12, 0x2c, 0x0a, 0x28, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x12, 0x25,
	0x0a, 0x21, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x10, 0x0c, 0x12, 0x2a, 0x0a, 0x26, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45,
	0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10,
	0x0d, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f,
	0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x0e,
	0x12, 0x28, 0x0a, 0x24, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x42,
	0x59, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x0f, 0x12, 0x2b, 0x0a, 0x27, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50,
	0x41, 0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x10, 0x12, 0x26, 0x0a, 0x22, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x14, 0x12,
	0x1e, 0x0a, 0x1a, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x50, 0x55, 0x54, 0x5f, 0x49, 0x4e,
	0x54, 0x4f, 0x5f, 0x54, 0x58, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x45, 0x58, 0x54, 0x10, 0x15, 0x12,
	0x21, 0x0a, 0x1d, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x16, 0x12, 0x25, 0x0a, 0x21, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x17, 0x12, 0x27, 0x0a, 0x23, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x42, 0x59, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0x18, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x41, 0x52,
	0x53, 0x48, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x19, 0x12, 0x1d, 0x0a,
	0x19, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x1a, 0x12, 0x20, 0x0a, 0x1c,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x55, 0x50,
	0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x1b, 0x12, 0x22,
	0x0a, 0x1e, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x55, 0x4e, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x10, 0x1c, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4d,
	0x41, 0x52, 0x53, 0x48, 0x41, 0x4c, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x1d,
	0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x52,
	0x53, 0x48, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x1e, 0x12, 0x18, 0x0a,
	0x14, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44,
	0x45, 0x52, 0x5f, 0x50, 0x4b, 0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4b,
	0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x21, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x22, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x5f, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x43, 0x45, 0x52,
	0x54, 0x10, 0x23, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x24, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x45, 0x45, 0x50, 0x10, 0x25, 0x12, 0x1a, 0x0a,
	0x16, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x26, 0x12, 0x21, 0x0a, 0x1d, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x56,
	0x4f, 0x4b, 0x45, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x10, 0x27, 0x2a, 0x26, 0x0a, 0x12,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41,
	0x49, 0x4c, 0x10, 0x01, 0x42, 0x3b, 0x0a, 0x18, 0x6f, 0x72, 0x67, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5a, 0x1f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67,
	0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_result_proto_rawDescOnce sync.Once
	file_result_proto_rawDescData = file_result_proto_rawDesc
)

func file_result_proto_rawDescGZIP() []byte {
	file_result_proto_rawDescOnce.Do(func() {
		file_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_result_proto_rawDescData)
	})
	return file_result_proto_rawDescData
}

var file_result_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_result_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_result_proto_goTypes = []interface{}{
	(TxStatusCode)(0),       // 0: pb.TxStatusCode
	(ContractResultCode)(0), // 1: pb.ContractResultCode
	(*TxResponse)(nil),      // 2: pb.TxResponse
	(*SubscribeResult)(nil), // 3: pb.SubscribeResult
	(*Result)(nil),          // 4: pb.Result
	(*ContractResult)(nil),  // 5: pb.ContractResult
	(*CertInfos)(nil),       // 6: pb.CertInfos
	(*CertInfo)(nil),        // 7: pb.CertInfo
}
var file_result_proto_depIdxs = []int32{
	0, // 0: pb.TxResponse.code:type_name -> pb.TxStatusCode
	5, // 1: pb.TxResponse.contract_result:type_name -> pb.ContractResult
	0, // 2: pb.Result.code:type_name -> pb.TxStatusCode
	5, // 3: pb.Result.contract_result:type_name -> pb.ContractResult
	1, // 4: pb.ContractResult.code:type_name -> pb.ContractResultCode
	7, // 5: pb.CertInfos.cert_infos:type_name -> pb.CertInfo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_result_proto_init() }
func file_result_proto_init() {
	if File_result_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_result_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_result_proto_goTypes,
		DependencyIndexes: file_result_proto_depIdxs,
		EnumInfos:         file_result_proto_enumTypes,
		MessageInfos:      file_result_proto_msgTypes,
	}.Build()
	File_result_proto = out.File
	file_result_proto_rawDesc = nil
	file_result_proto_goTypes = nil
	file_result_proto_depIdxs = nil
}
