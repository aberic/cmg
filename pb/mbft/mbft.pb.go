// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: mbft.proto

package mbft

import (
	pb "chainmaker.org/chainmaker-go/pb"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MBFTMessageType int32

const (
	MBFTMessageType_ProposalMessage      MBFTMessageType = 0
	MBFTMessageType_EndorseMessage       MBFTMessageType = 1
	MBFTMessageType_CommitMessage        MBFTMessageType = 2
	MBFTMessageType_PeerStateMessage     MBFTMessageType = 3
	MBFTMessageType_PeerHeartBeatMessage MBFTMessageType = 4
)

// Enum value maps for MBFTMessageType.
var (
	MBFTMessageType_name = map[int32]string{
		0: "ProposalMessage",
		1: "EndorseMessage",
		2: "CommitMessage",
		3: "PeerStateMessage",
		4: "PeerHeartBeatMessage",
	}
	MBFTMessageType_value = map[string]int32{
		"ProposalMessage":      0,
		"EndorseMessage":       1,
		"CommitMessage":        2,
		"PeerStateMessage":     3,
		"PeerHeartBeatMessage": 4,
	}
)

func (x MBFTMessageType) Enum() *MBFTMessageType {
	p := new(MBFTMessageType)
	*p = x
	return p
}

func (x MBFTMessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MBFTMessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_mbft_proto_enumTypes[0].Descriptor()
}

func (MBFTMessageType) Type() protoreflect.EnumType {
	return &file_mbft_proto_enumTypes[0]
}

func (x MBFTMessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MBFTMessageType.Descriptor instead.
func (MBFTMessageType) EnumDescriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{0}
}

type MBFTConsStateType int32

const (
	MBFTConsStateType_NewHeight      MBFTConsStateType = 0
	MBFTConsStateType_NewRound       MBFTConsStateType = 1
	MBFTConsStateType_Propose        MBFTConsStateType = 2
	MBFTConsStateType_Endorse        MBFTConsStateType = 3
	MBFTConsStateType_PendingEndorse MBFTConsStateType = 4
	MBFTConsStateType_Commit         MBFTConsStateType = 5
	MBFTConsStateType_PendingCommit  MBFTConsStateType = 6
	MBFTConsStateType_Seal           MBFTConsStateType = 7
)

// Enum value maps for MBFTConsStateType.
var (
	MBFTConsStateType_name = map[int32]string{
		0: "NewHeight",
		1: "NewRound",
		2: "Propose",
		3: "Endorse",
		4: "PendingEndorse",
		5: "Commit",
		6: "PendingCommit",
		7: "Seal",
	}
	MBFTConsStateType_value = map[string]int32{
		"NewHeight":      0,
		"NewRound":       1,
		"Propose":        2,
		"Endorse":        3,
		"PendingEndorse": 4,
		"Commit":         5,
		"PendingCommit":  6,
		"Seal":           7,
	}
)

func (x MBFTConsStateType) Enum() *MBFTConsStateType {
	p := new(MBFTConsStateType)
	*p = x
	return p
}

func (x MBFTConsStateType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MBFTConsStateType) Descriptor() protoreflect.EnumDescriptor {
	return file_mbft_proto_enumTypes[1].Descriptor()
}

func (MBFTConsStateType) Type() protoreflect.EnumType {
	return &file_mbft_proto_enumTypes[1]
}

func (x MBFTConsStateType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MBFTConsStateType.Descriptor instead.
func (MBFTConsStateType) EnumDescriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{1}
}

type MBFTQuorumCommits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID []byte              `protobuf:"bytes,1,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	Height  int64               `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Round   int64               `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	Level   int64               `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	Commits []*MBFTConsensusMsg `protobuf:"bytes,5,rep,name=Commits,proto3" json:"Commits,omitempty"`
}

func (x *MBFTQuorumCommits) Reset() {
	*x = MBFTQuorumCommits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTQuorumCommits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTQuorumCommits) ProtoMessage() {}

func (x *MBFTQuorumCommits) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTQuorumCommits.ProtoReflect.Descriptor instead.
func (*MBFTQuorumCommits) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{0}
}

func (x *MBFTQuorumCommits) GetBlockID() []byte {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *MBFTQuorumCommits) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MBFTQuorumCommits) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MBFTQuorumCommits) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MBFTQuorumCommits) GetCommits() []*MBFTConsensusMsg {
	if x != nil {
		return x.Commits
	}
	return nil
}

type MBFTProposalMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block          *pb.Block `protobuf:"bytes,1,opt,name=Block,proto3" json:"Block,omitempty"`
	Height         int64     `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Round          int64     `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	LastValidRound int64     `protobuf:"varint,4,opt,name=LastValidRound,proto3" json:"LastValidRound,omitempty"`
	Proposer       []byte    `protobuf:"bytes,5,opt,name=Proposer,proto3" json:"Proposer,omitempty"`
	ProposerIdx    int64     `protobuf:"varint,6,opt,name=ProposerIdx,proto3" json:"ProposerIdx,omitempty"`
	// MBFTConsensusInfo  LastConsInfo = 7;
	Level int64 `protobuf:"varint,8,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MBFTProposalMsg) Reset() {
	*x = MBFTProposalMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTProposalMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTProposalMsg) ProtoMessage() {}

func (x *MBFTProposalMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTProposalMsg.ProtoReflect.Descriptor instead.
func (*MBFTProposalMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{1}
}

func (x *MBFTProposalMsg) GetBlock() *pb.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *MBFTProposalMsg) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MBFTProposalMsg) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MBFTProposalMsg) GetLastValidRound() int64 {
	if x != nil {
		return x.LastValidRound
	}
	return 0
}

func (x *MBFTProposalMsg) GetProposer() []byte {
	if x != nil {
		return x.Proposer
	}
	return nil
}

func (x *MBFTProposalMsg) GetProposerIdx() int64 {
	if x != nil {
		return x.ProposerIdx
	}
	return 0
}

func (x *MBFTProposalMsg) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type MBFTVoteMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockID    []byte `protobuf:"bytes,1,opt,name=BlockID,proto3" json:"BlockID,omitempty"`
	Height     int64  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Round      int64  `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	Author     []byte `protobuf:"bytes,4,opt,name=Author,proto3" json:"Author,omitempty"`
	AuthorIdx  int64  `protobuf:"varint,5,opt,name=AuthorIdx,proto3" json:"AuthorIdx,omitempty"`
	EmptyBlock bool   `protobuf:"varint,6,opt,name=EmptyBlock,proto3" json:"EmptyBlock,omitempty"`
	Level      int64  `protobuf:"varint,7,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MBFTVoteMsg) Reset() {
	*x = MBFTVoteMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTVoteMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTVoteMsg) ProtoMessage() {}

func (x *MBFTVoteMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTVoteMsg.ProtoReflect.Descriptor instead.
func (*MBFTVoteMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{2}
}

func (x *MBFTVoteMsg) GetBlockID() []byte {
	if x != nil {
		return x.BlockID
	}
	return nil
}

func (x *MBFTVoteMsg) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MBFTVoteMsg) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MBFTVoteMsg) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MBFTVoteMsg) GetAuthorIdx() int64 {
	if x != nil {
		return x.AuthorIdx
	}
	return 0
}

func (x *MBFTVoteMsg) GetEmptyBlock() bool {
	if x != nil {
		return x.EmptyBlock
	}
	return false
}

func (x *MBFTVoteMsg) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

type MBFTVoteStateEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuthorIdx int64 `protobuf:"varint,1,opt,name=AuthorIdx,proto3" json:"AuthorIdx,omitempty"`
	Result    bool  `protobuf:"varint,2,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *MBFTVoteStateEntry) Reset() {
	*x = MBFTVoteStateEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTVoteStateEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTVoteStateEntry) ProtoMessage() {}

func (x *MBFTVoteStateEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTVoteStateEntry.ProtoReflect.Descriptor instead.
func (*MBFTVoteStateEntry) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{3}
}

func (x *MBFTVoteStateEntry) GetAuthorIdx() int64 {
	if x != nil {
		return x.AuthorIdx
	}
	return 0
}

func (x *MBFTVoteStateEntry) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MBFTPeerHeartBeatMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Height      int64                 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Round       int64                 `protobuf:"varint,2,opt,name=Round,proto3" json:"Round,omitempty"`
	Level       int64                 `protobuf:"varint,3,opt,name=Level,proto3" json:"Level,omitempty"`
	State       MBFTConsStateType     `protobuf:"varint,4,opt,name=State,proto3,enum=mbft.MBFTConsStateType" json:"State,omitempty"`
	Proposal    bool                  `protobuf:"varint,5,opt,name=Proposal,proto3" json:"Proposal,omitempty"`
	Endorses    []*MBFTVoteStateEntry `protobuf:"bytes,6,rep,name=Endorses,proto3" json:"Endorses,omitempty"`
	Commits     []*MBFTVoteStateEntry `protobuf:"bytes,7,rep,name=Commits,proto3" json:"Commits,omitempty"`
	LastHeight  int64                 `protobuf:"varint,8,opt,name=LastHeight,proto3" json:"LastHeight,omitempty"`
	LastBlockID []byte                `protobuf:"bytes,9,opt,name=LastBlockID,proto3" json:"LastBlockID,omitempty"`
	LastRound   int64                 `protobuf:"varint,10,opt,name=LastRound,proto3" json:"LastRound,omitempty"`
	LastLevel   int64                 `protobuf:"varint,11,opt,name=LastLevel,proto3" json:"LastLevel,omitempty"`
	Author      []byte                `protobuf:"bytes,12,opt,name=Author,proto3" json:"Author,omitempty"`
	AuthorIdx   int64                 `protobuf:"varint,13,opt,name=AuthorIdx,proto3" json:"AuthorIdx,omitempty"`
}

func (x *MBFTPeerHeartBeatMsg) Reset() {
	*x = MBFTPeerHeartBeatMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTPeerHeartBeatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTPeerHeartBeatMsg) ProtoMessage() {}

func (x *MBFTPeerHeartBeatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTPeerHeartBeatMsg.ProtoReflect.Descriptor instead.
func (*MBFTPeerHeartBeatMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{4}
}

func (x *MBFTPeerHeartBeatMsg) GetHeight() int64 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetState() MBFTConsStateType {
	if x != nil {
		return x.State
	}
	return MBFTConsStateType_NewHeight
}

func (x *MBFTPeerHeartBeatMsg) GetProposal() bool {
	if x != nil {
		return x.Proposal
	}
	return false
}

func (x *MBFTPeerHeartBeatMsg) GetEndorses() []*MBFTVoteStateEntry {
	if x != nil {
		return x.Endorses
	}
	return nil
}

func (x *MBFTPeerHeartBeatMsg) GetCommits() []*MBFTVoteStateEntry {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *MBFTPeerHeartBeatMsg) GetLastHeight() int64 {
	if x != nil {
		return x.LastHeight
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetLastBlockID() []byte {
	if x != nil {
		return x.LastBlockID
	}
	return nil
}

func (x *MBFTPeerHeartBeatMsg) GetLastRound() int64 {
	if x != nil {
		return x.LastRound
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetLastLevel() int64 {
	if x != nil {
		return x.LastLevel
	}
	return 0
}

func (x *MBFTPeerHeartBeatMsg) GetAuthor() []byte {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *MBFTPeerHeartBeatMsg) GetAuthorIdx() int64 {
	if x != nil {
		return x.AuthorIdx
	}
	return 0
}

type MBFTPeerStateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Active bool   `protobuf:"varint,2,opt,name=Active,proto3" json:"Active,omitempty"`
}

func (x *MBFTPeerStateMsg) Reset() {
	*x = MBFTPeerStateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTPeerStateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTPeerStateMsg) ProtoMessage() {}

func (x *MBFTPeerStateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTPeerStateMsg.ProtoReflect.Descriptor instead.
func (*MBFTPeerStateMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{5}
}

func (x *MBFTPeerStateMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MBFTPeerStateMsg) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type MBFTConsensusPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type MBFTMessageType `protobuf:"varint,1,opt,name=Type,proto3,enum=mbft.MBFTMessageType" json:"Type,omitempty"`
	// Types that are assignable to Data:
	//	*MBFTConsensusPayload_ProposalMsg
	//	*MBFTConsensusPayload_VoteMsg
	//	*MBFTConsensusPayload_PeerStateMsg
	//	*MBFTConsensusPayload_PeerHeartBeatMsg
	Data isMBFTConsensusPayload_Data `protobuf_oneof:"Data"`
}

func (x *MBFTConsensusPayload) Reset() {
	*x = MBFTConsensusPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTConsensusPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTConsensusPayload) ProtoMessage() {}

func (x *MBFTConsensusPayload) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTConsensusPayload.ProtoReflect.Descriptor instead.
func (*MBFTConsensusPayload) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{6}
}

func (x *MBFTConsensusPayload) GetType() MBFTMessageType {
	if x != nil {
		return x.Type
	}
	return MBFTMessageType_ProposalMessage
}

func (m *MBFTConsensusPayload) GetData() isMBFTConsensusPayload_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *MBFTConsensusPayload) GetProposalMsg() *MBFTProposalMsg {
	if x, ok := x.GetData().(*MBFTConsensusPayload_ProposalMsg); ok {
		return x.ProposalMsg
	}
	return nil
}

func (x *MBFTConsensusPayload) GetVoteMsg() *MBFTVoteMsg {
	if x, ok := x.GetData().(*MBFTConsensusPayload_VoteMsg); ok {
		return x.VoteMsg
	}
	return nil
}

func (x *MBFTConsensusPayload) GetPeerStateMsg() *MBFTPeerStateMsg {
	if x, ok := x.GetData().(*MBFTConsensusPayload_PeerStateMsg); ok {
		return x.PeerStateMsg
	}
	return nil
}

func (x *MBFTConsensusPayload) GetPeerHeartBeatMsg() *MBFTPeerHeartBeatMsg {
	if x, ok := x.GetData().(*MBFTConsensusPayload_PeerHeartBeatMsg); ok {
		return x.PeerHeartBeatMsg
	}
	return nil
}

type isMBFTConsensusPayload_Data interface {
	isMBFTConsensusPayload_Data()
}

type MBFTConsensusPayload_ProposalMsg struct {
	ProposalMsg *MBFTProposalMsg `protobuf:"bytes,2,opt,name=ProposalMsg,proto3,oneof"`
}

type MBFTConsensusPayload_VoteMsg struct {
	VoteMsg *MBFTVoteMsg `protobuf:"bytes,3,opt,name=VoteMsg,proto3,oneof"`
}

type MBFTConsensusPayload_PeerStateMsg struct {
	PeerStateMsg *MBFTPeerStateMsg `protobuf:"bytes,5,opt,name=PeerStateMsg,proto3,oneof"`
}

type MBFTConsensusPayload_PeerHeartBeatMsg struct {
	PeerHeartBeatMsg *MBFTPeerHeartBeatMsg `protobuf:"bytes,6,opt,name=PeerHeartBeatMsg,proto3,oneof"`
}

func (*MBFTConsensusPayload_ProposalMsg) isMBFTConsensusPayload_Data() {}

func (*MBFTConsensusPayload_VoteMsg) isMBFTConsensusPayload_Data() {}

func (*MBFTConsensusPayload_PeerStateMsg) isMBFTConsensusPayload_Data() {}

func (*MBFTConsensusPayload_PeerHeartBeatMsg) isMBFTConsensusPayload_Data() {}

type MBFTConsensusMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   *MBFTConsensusPayload `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	SignEntry *pb.EndorsementEntry  `protobuf:"bytes,2,opt,name=SignEntry,proto3" json:"SignEntry,omitempty"`
}

func (x *MBFTConsensusMsg) Reset() {
	*x = MBFTConsensusMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTConsensusMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTConsensusMsg) ProtoMessage() {}

func (x *MBFTConsensusMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTConsensusMsg.ProtoReflect.Descriptor instead.
func (*MBFTConsensusMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{7}
}

func (x *MBFTConsensusMsg) GetPayload() *MBFTConsensusPayload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MBFTConsensusMsg) GetSignEntry() *pb.EndorsementEntry {
	if x != nil {
		return x.SignEntry
	}
	return nil
}

type MBFTConsensusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastStateRoot []byte `protobuf:"bytes,1,opt,name=LastStateRoot,proto3" json:"LastStateRoot,omitempty"`
	QC            []byte `protobuf:"bytes,2,opt,name=QC,proto3" json:"QC,omitempty"`
}

func (x *MBFTConsensusInfo) Reset() {
	*x = MBFTConsensusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTConsensusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTConsensusInfo) ProtoMessage() {}

func (x *MBFTConsensusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTConsensusInfo.ProtoReflect.Descriptor instead.
func (*MBFTConsensusInfo) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{8}
}

func (x *MBFTConsensusInfo) GetLastStateRoot() []byte {
	if x != nil {
		return x.LastStateRoot
	}
	return nil
}

func (x *MBFTConsensusInfo) GetQC() []byte {
	if x != nil {
		return x.QC
	}
	return nil
}

type MBFTRandomMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusData []byte `protobuf:"bytes,1,opt,name=ConsensusData,proto3" json:"ConsensusData,omitempty"`
	TxHash        []byte `protobuf:"bytes,2,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	Seed          int64  `protobuf:"varint,3,opt,name=Seed,proto3" json:"Seed,omitempty"`
}

func (x *MBFTRandomMsg) Reset() {
	*x = MBFTRandomMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTRandomMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTRandomMsg) ProtoMessage() {}

func (x *MBFTRandomMsg) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTRandomMsg.ProtoReflect.Descriptor instead.
func (*MBFTRandomMsg) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{9}
}

func (x *MBFTRandomMsg) GetConsensusData() []byte {
	if x != nil {
		return x.ConsensusData
	}
	return nil
}

func (x *MBFTRandomMsg) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *MBFTRandomMsg) GetSeed() int64 {
	if x != nil {
		return x.Seed
	}
	return 0
}

type MBFTBlockHeaderConsensusArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConsensusType int64 `protobuf:"varint,1,opt,name=ConsensusType,proto3" json:"ConsensusType,omitempty"`
	// bytes ConsensusData = 2;
	Round int64 `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	Level int64 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
}

func (x *MBFTBlockHeaderConsensusArgs) Reset() {
	*x = MBFTBlockHeaderConsensusArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mbft_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MBFTBlockHeaderConsensusArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MBFTBlockHeaderConsensusArgs) ProtoMessage() {}

func (x *MBFTBlockHeaderConsensusArgs) ProtoReflect() protoreflect.Message {
	mi := &file_mbft_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MBFTBlockHeaderConsensusArgs.ProtoReflect.Descriptor instead.
func (*MBFTBlockHeaderConsensusArgs) Descriptor() ([]byte, []int) {
	return file_mbft_proto_rawDescGZIP(), []int{10}
}

func (x *MBFTBlockHeaderConsensusArgs) GetConsensusType() int64 {
	if x != nil {
		return x.ConsensusType
	}
	return 0
}

func (x *MBFTBlockHeaderConsensusArgs) GetRound() int64 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *MBFTBlockHeaderConsensusArgs) GetLevel() int64 {
	if x != nil {
		return x.Level
	}
	return 0
}

var File_mbft_proto protoreflect.FileDescriptor

var file_mbft_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x62,
	0x66, 0x74, 0x1a, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x01, 0x0a, 0x11, 0x4d, 0x42, 0x46, 0x54, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16,
	0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x43,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0f, 0x4d, 0x42, 0x46, 0x54, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1f, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0e, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x49, 0x64, 0x78, 0x12, 0x14, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x0b, 0x4d, 0x42, 0x46, 0x54, 0x56, 0x6f, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64,
	0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x4a, 0x0a, 0x12, 0x4d, 0x42, 0x46, 0x54, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xc3, 0x03, 0x0a, 0x14, 0x4d, 0x42, 0x46, 0x54, 0x50, 0x65, 0x65, 0x72,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x2d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x12, 0x34, 0x0a, 0x08, 0x45,
	0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x56, 0x6f,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4c, 0x61, 0x73, 0x74, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x4c, 0x61, 0x73, 0x74, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x78, 0x22, 0x3a, 0x0a, 0x10, 0x4d, 0x42, 0x46,
	0x54, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x0e, 0x0a,
	0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xbb, 0x02, 0x0a, 0x14, 0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f,
	0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6d,
	0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x4d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46,
	0x54, 0x56, 0x6f, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x07, 0x56, 0x6f, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x3c, 0x0a, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x62, 0x66, 0x74,
	0x2e, 0x4d, 0x42, 0x46, 0x54, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x0c, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73,
	0x67, 0x12, 0x48, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x62,
	0x66, 0x74, 0x2e, 0x4d, 0x42, 0x46, 0x54, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x10, 0x50, 0x65, 0x65, 0x72, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x42, 0x06, 0x0a, 0x04, 0x44,
	0x61, 0x74, 0x61, 0x22, 0x7c, 0x0a, 0x10, 0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x34, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x62, 0x66, 0x74, 0x2e,
	0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0x49, 0x0a, 0x11, 0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x51, 0x43, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x51, 0x43, 0x22, 0x61, 0x0a, 0x0d,
	0x4d, 0x42, 0x46, 0x54, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x4d, 0x73, 0x67, 0x12, 0x24, 0x0a,
	0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x53,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x65, 0x65, 0x64, 0x22,
	0x70, 0x0a, 0x1c, 0x4d, 0x42, 0x46, 0x54, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x41, 0x72, 0x67, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x2a, 0x7d, 0x0a, 0x0f, 0x4d, 0x42, 0x46, 0x54, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6e, 0x64,
	0x6f, 0x72, 0x73, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x65, 0x65, 0x72, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x04,
	0x2a, 0x87, 0x01, 0x0a, 0x11, 0x4d, 0x42, 0x46, 0x54, 0x43, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x65, 0x77, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a,
	0x0e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x6f, 0x72, 0x73, 0x65, 0x10,
	0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a,
	0x0d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x6c, 0x10, 0x07, 0x42, 0x26, 0x5a, 0x24, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x6d, 0x62,
	0x66, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mbft_proto_rawDescOnce sync.Once
	file_mbft_proto_rawDescData = file_mbft_proto_rawDesc
)

func file_mbft_proto_rawDescGZIP() []byte {
	file_mbft_proto_rawDescOnce.Do(func() {
		file_mbft_proto_rawDescData = protoimpl.X.CompressGZIP(file_mbft_proto_rawDescData)
	})
	return file_mbft_proto_rawDescData
}

var file_mbft_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_mbft_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_mbft_proto_goTypes = []interface{}{
	(MBFTMessageType)(0),                 // 0: mbft.MBFTMessageType
	(MBFTConsStateType)(0),               // 1: mbft.MBFTConsStateType
	(*MBFTQuorumCommits)(nil),            // 2: mbft.MBFTQuorumCommits
	(*MBFTProposalMsg)(nil),              // 3: mbft.MBFTProposalMsg
	(*MBFTVoteMsg)(nil),                  // 4: mbft.MBFTVoteMsg
	(*MBFTVoteStateEntry)(nil),           // 5: mbft.MBFTVoteStateEntry
	(*MBFTPeerHeartBeatMsg)(nil),         // 6: mbft.MBFTPeerHeartBeatMsg
	(*MBFTPeerStateMsg)(nil),             // 7: mbft.MBFTPeerStateMsg
	(*MBFTConsensusPayload)(nil),         // 8: mbft.MBFTConsensusPayload
	(*MBFTConsensusMsg)(nil),             // 9: mbft.MBFTConsensusMsg
	(*MBFTConsensusInfo)(nil),            // 10: mbft.MBFTConsensusInfo
	(*MBFTRandomMsg)(nil),                // 11: mbft.MBFTRandomMsg
	(*MBFTBlockHeaderConsensusArgs)(nil), // 12: mbft.MBFTBlockHeaderConsensusArgs
	(*pb.Block)(nil),                     // 13: pb.Block
	(*pb.EndorsementEntry)(nil),          // 14: pb.EndorsementEntry
}
var file_mbft_proto_depIdxs = []int32{
	9,  // 0: mbft.MBFTQuorumCommits.Commits:type_name -> mbft.MBFTConsensusMsg
	13, // 1: mbft.MBFTProposalMsg.Block:type_name -> pb.Block
	1,  // 2: mbft.MBFTPeerHeartBeatMsg.State:type_name -> mbft.MBFTConsStateType
	5,  // 3: mbft.MBFTPeerHeartBeatMsg.Endorses:type_name -> mbft.MBFTVoteStateEntry
	5,  // 4: mbft.MBFTPeerHeartBeatMsg.Commits:type_name -> mbft.MBFTVoteStateEntry
	0,  // 5: mbft.MBFTConsensusPayload.Type:type_name -> mbft.MBFTMessageType
	3,  // 6: mbft.MBFTConsensusPayload.ProposalMsg:type_name -> mbft.MBFTProposalMsg
	4,  // 7: mbft.MBFTConsensusPayload.VoteMsg:type_name -> mbft.MBFTVoteMsg
	7,  // 8: mbft.MBFTConsensusPayload.PeerStateMsg:type_name -> mbft.MBFTPeerStateMsg
	6,  // 9: mbft.MBFTConsensusPayload.PeerHeartBeatMsg:type_name -> mbft.MBFTPeerHeartBeatMsg
	8,  // 10: mbft.MBFTConsensusMsg.payload:type_name -> mbft.MBFTConsensusPayload
	14, // 11: mbft.MBFTConsensusMsg.SignEntry:type_name -> pb.EndorsementEntry
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mbft_proto_init() }
func file_mbft_proto_init() {
	if File_mbft_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mbft_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTQuorumCommits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTProposalMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTVoteMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTVoteStateEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTPeerHeartBeatMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTPeerStateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTConsensusPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTConsensusMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTConsensusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTRandomMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mbft_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MBFTBlockHeaderConsensusArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_mbft_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MBFTConsensusPayload_ProposalMsg)(nil),
		(*MBFTConsensusPayload_VoteMsg)(nil),
		(*MBFTConsensusPayload_PeerStateMsg)(nil),
		(*MBFTConsensusPayload_PeerHeartBeatMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mbft_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mbft_proto_goTypes,
		DependencyIndexes: file_mbft_proto_depIdxs,
		EnumInfos:         file_mbft_proto_enumTypes,
		MessageInfos:      file_mbft_proto_msgTypes,
	}.Build()
	File_mbft_proto = out.File
	file_mbft_proto_rawDesc = nil
	file_mbft_proto_goTypes = nil
	file_mbft_proto_depIdxs = nil
}
