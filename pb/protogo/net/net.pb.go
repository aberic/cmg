// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: net/net.proto

package net

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// specific net message types
type NetMsg_MsgType int32

const (
	NetMsg_INVALID_MSG    NetMsg_MsgType = 0
	NetMsg_TX             NetMsg_MsgType = 1
	NetMsg_TXS            NetMsg_MsgType = 2
	NetMsg_BLOCK          NetMsg_MsgType = 3
	NetMsg_BLOCKS         NetMsg_MsgType = 4
	NetMsg_CONSENSUS_MSG  NetMsg_MsgType = 5
	NetMsg_SYNC_BLOCK_MSG NetMsg_MsgType = 6
)

var NetMsg_MsgType_name = map[int32]string{
	0: "INVALID_MSG",
	1: "TX",
	2: "TXS",
	3: "BLOCK",
	4: "BLOCKS",
	5: "CONSENSUS_MSG",
	6: "SYNC_BLOCK_MSG",
}

var NetMsg_MsgType_value = map[string]int32{
	"INVALID_MSG":    0,
	"TX":             1,
	"TXS":            2,
	"BLOCK":          3,
	"BLOCKS":         4,
	"CONSENSUS_MSG":  5,
	"SYNC_BLOCK_MSG": 6,
}

func (x NetMsg_MsgType) String() string {
	return proto.EnumName(NetMsg_MsgType_name, int32(x))
}

func (NetMsg_MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8b79b5a127a76ba1, []int{1, 0}
}

// wrapped network message
type Msg struct {
	Msg     *NetMsg `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	ChainId string  `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// 属于那个模块，判断消息类型
	Flag string `protobuf:"bytes,3,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b79b5a127a76ba1, []int{0}
}
func (m *Msg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return m.Size()
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetMsg() *NetMsg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *Msg) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Msg) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

// net message
type NetMsg struct {
	// payload of the message
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	// message type
	Type NetMsg_MsgType `protobuf:"varint,2,opt,name=type,proto3,enum=net.NetMsg_MsgType" json:"type,omitempty"`
	// nodeId
	To string `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
}

func (m *NetMsg) Reset()         { *m = NetMsg{} }
func (m *NetMsg) String() string { return proto.CompactTextString(m) }
func (*NetMsg) ProtoMessage()    {}
func (*NetMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b79b5a127a76ba1, []int{1}
}
func (m *NetMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NetMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NetMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NetMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetMsg.Merge(m, src)
}
func (m *NetMsg) XXX_Size() int {
	return m.Size()
}
func (m *NetMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_NetMsg.DiscardUnknown(m)
}

var xxx_messageInfo_NetMsg proto.InternalMessageInfo

func (m *NetMsg) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *NetMsg) GetType() NetMsg_MsgType {
	if m != nil {
		return m.Type
	}
	return NetMsg_INVALID_MSG
}

func (m *NetMsg) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func init() {
	proto.RegisterEnum("net.NetMsg_MsgType", NetMsg_MsgType_name, NetMsg_MsgType_value)
	proto.RegisterType((*Msg)(nil), "net.Msg")
	proto.RegisterType((*NetMsg)(nil), "net.NetMsg")
}

func init() { proto.RegisterFile("net/net.proto", fileDescriptor_8b79b5a127a76ba1) }

var fileDescriptor_8b79b5a127a76ba1 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4e, 0xf2, 0x40,
	0x14, 0x85, 0x3b, 0x2d, 0xb4, 0x3f, 0x97, 0x1f, 0xac, 0xd7, 0x4d, 0x5d, 0xd8, 0x10, 0x5c, 0xc8,
	0xc6, 0x92, 0xe0, 0xda, 0x85, 0xa0, 0x31, 0x44, 0x5a, 0x92, 0x0e, 0x1a, 0x74, 0x43, 0x8a, 0x8c,
	0x23, 0x11, 0x3a, 0x0d, 0x9d, 0x0d, 0x6f, 0xe1, 0x53, 0x19, 0x97, 0x2c, 0x5d, 0x1a, 0x78, 0x11,
	0xc3, 0x15, 0xa3, 0xbb, 0x7b, 0x4e, 0xbe, 0x73, 0x26, 0x73, 0xa0, 0x92, 0x0a, 0xdd, 0x4c, 0x85,
	0x0e, 0xb2, 0x85, 0xd2, 0x0a, 0xad, 0x54, 0xe8, 0x3a, 0x07, 0x2b, 0xcc, 0x25, 0x1e, 0x81, 0x35,
	0xcf, 0xa5, 0xc7, 0x6a, 0xac, 0x51, 0x6e, 0x95, 0x83, 0x2d, 0x14, 0x09, 0x1d, 0xe6, 0x32, 0xde,
	0xfa, 0x78, 0x08, 0xff, 0x1e, 0x9f, 0x93, 0x69, 0x3a, 0x9a, 0x4e, 0x3c, 0xb3, 0xc6, 0x1a, 0xa5,
	0xd8, 0x21, 0xdd, 0x9d, 0x20, 0x42, 0xe1, 0x69, 0x96, 0x48, 0xcf, 0x22, 0x9b, 0xee, 0xfa, 0x1b,
	0x03, 0xfb, 0x3b, 0x8e, 0x1e, 0x38, 0x59, 0xb2, 0x9c, 0xa9, 0x64, 0x42, 0xe5, 0xff, 0xe3, 0x1f,
	0x89, 0x27, 0x50, 0xd0, 0xcb, 0x4c, 0x50, 0x5f, 0xb5, 0x75, 0xf0, 0xe7, 0xcd, 0x20, 0xcc, 0xe5,
	0x60, 0x99, 0x89, 0x98, 0x00, 0xac, 0x82, 0xa9, 0xd5, 0xae, 0xdf, 0xd4, 0xaa, 0x3e, 0x05, 0x67,
	0x07, 0xe0, 0x1e, 0x94, 0xbb, 0xd1, 0xdd, 0x45, 0xaf, 0x7b, 0x39, 0x0a, 0xf9, 0xb5, 0x6b, 0xa0,
	0x0d, 0xe6, 0x60, 0xe8, 0x32, 0x74, 0xc0, 0x1a, 0x0c, 0xb9, 0x6b, 0x62, 0x09, 0x8a, 0xed, 0x5e,
	0xbf, 0x73, 0xe3, 0x5a, 0x08, 0x60, 0xd3, 0xc9, 0xdd, 0x02, 0xee, 0x43, 0xa5, 0xd3, 0x8f, 0xf8,
	0x55, 0xc4, 0x6f, 0x39, 0x45, 0x8b, 0x88, 0x50, 0xe5, 0xf7, 0x51, 0x67, 0x44, 0x0c, 0x79, 0x76,
	0xfb, 0xfc, 0x7d, 0xed, 0xb3, 0xd5, 0xda, 0x67, 0x9f, 0x6b, 0x9f, 0xbd, 0x6e, 0x7c, 0x63, 0xb5,
	0xf1, 0x8d, 0x8f, 0x8d, 0x6f, 0x3c, 0x1c, 0xd3, 0xff, 0xe7, 0xc9, 0x8b, 0x58, 0x04, 0x6a, 0x21,
	0x9b, 0xbf, 0xf2, 0x54, 0xaa, 0x66, 0x36, 0xde, 0xee, 0x3c, 0xb6, 0x69, 0xe8, 0xb3, 0xaf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x43, 0x6d, 0xa6, 0x4a, 0x79, 0x01, 0x00, 0x00,
}

func (m *Msg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Msg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Msg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintNet(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintNet(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Msg != nil {
		{
			size, err := m.Msg.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNet(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NetMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NetMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NetMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintNet(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = encodeVarintNet(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintNet(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNet(dAtA []byte, offset int, v uint64) int {
	offset -= sovNet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Msg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Msg != nil {
		l = m.Msg.Size()
		n += 1 + l + sovNet(uint64(l))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovNet(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovNet(uint64(l))
	}
	return n
}

func (m *NetMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovNet(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovNet(uint64(m.Type))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovNet(uint64(l))
	}
	return n
}

func sovNet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNet(x uint64) (n int) {
	return sovNet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Msg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Msg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Msg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Msg == nil {
				m.Msg = &NetMsg{}
			}
			if err := m.Msg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NetMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NetMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NetMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= NetMsg_MsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNet = fmt.Errorf("proto: unexpected end of group")
)
