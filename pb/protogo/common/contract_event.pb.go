// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/contract_event.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractEvent struct {
	BlockHeight     int64    `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ChainId         string   `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Topic           string   `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
	TxId            string   `protobuf:"bytes,4,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	ContractName    string   `protobuf:"bytes,5,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	ContractVersion string   `protobuf:"bytes,6,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	EventData       []string `protobuf:"bytes,7,rep,name=event_data,json=eventData,proto3" json:"event_data,omitempty"`
}

func (m *ContractEvent) Reset()         { *m = ContractEvent{} }
func (m *ContractEvent) String() string { return proto.CompactTextString(m) }
func (*ContractEvent) ProtoMessage()    {}
func (*ContractEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_98142e298fc08b83, []int{0}
}
func (m *ContractEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractEvent.Merge(m, src)
}
func (m *ContractEvent) XXX_Size() int {
	return m.Size()
}
func (m *ContractEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ContractEvent proto.InternalMessageInfo

func (m *ContractEvent) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ContractEvent) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ContractEvent) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *ContractEvent) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *ContractEvent) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ContractEvent) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *ContractEvent) GetEventData() []string {
	if m != nil {
		return m.EventData
	}
	return nil
}

func init() {
	proto.RegisterType((*ContractEvent)(nil), "common.ContractEvent")
}

func init() { proto.RegisterFile("common/contract_event.proto", fileDescriptor_98142e298fc08b83) }

var fileDescriptor_98142e298fc08b83 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0xeb, 0xaf, 0xff, 0xbe, 0x9a, 0x56, 0x45, 0x86, 0xc1, 0x08, 0x61, 0x15, 0x58, 0xca,
	0x40, 0x32, 0xf0, 0x06, 0x2d, 0x48, 0x74, 0x61, 0xc8, 0xc0, 0xc0, 0x12, 0x39, 0x8e, 0x95, 0x44,
	0x25, 0xbe, 0x91, 0x6b, 0x55, 0x7d, 0x0c, 0x1e, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x06, 0x5e, 0x03,
	0xe5, 0x86, 0x06, 0xc6, 0xf3, 0x3b, 0x3f, 0x59, 0x3e, 0x97, 0x9e, 0x2b, 0xc8, 0x73, 0x30, 0xbe,
	0x02, 0xe3, 0xac, 0x54, 0x2e, 0xd4, 0x5b, 0x6d, 0x9c, 0x57, 0x58, 0x70, 0xc0, 0x06, 0x4d, 0x79,
	0xf5, 0x45, 0xe8, 0x64, 0xf9, 0x23, 0x3c, 0xd4, 0x3d, 0xbb, 0xa4, 0xe3, 0xe8, 0x15, 0xd4, 0x3a,
	0x4c, 0x75, 0x96, 0xa4, 0x8e, 0x93, 0x19, 0x99, 0x77, 0x83, 0x23, 0x64, 0x8f, 0x88, 0xd8, 0x19,
	0xfd, 0xaf, 0x52, 0x99, 0x99, 0x30, 0x8b, 0xf9, 0xbf, 0x19, 0x99, 0x8f, 0x82, 0x21, 0xe6, 0x55,
	0xcc, 0x4e, 0x69, 0xdf, 0x41, 0x91, 0x29, 0xde, 0x45, 0xde, 0x04, 0x76, 0x42, 0xfb, 0x6e, 0x57,
	0xdb, 0x3d, 0xa4, 0x3d, 0xb7, 0x5b, 0xc5, 0xec, 0x9a, 0x4e, 0xda, 0xaf, 0x19, 0x99, 0x6b, 0xde,
	0xc7, 0x72, 0x7c, 0x80, 0x4f, 0x32, 0xd7, 0xec, 0x86, 0x1e, 0xb7, 0xd2, 0x56, 0xdb, 0x4d, 0x06,
	0x86, 0x0f, 0xd0, 0x9b, 0x1e, 0xf8, 0x73, 0x83, 0xd9, 0x05, 0xa5, 0xb8, 0x30, 0x8c, 0xa5, 0x93,
	0x7c, 0x38, 0xeb, 0xce, 0x47, 0xc1, 0x08, 0xc9, 0xbd, 0x74, 0x72, 0xb1, 0x79, 0x2f, 0x05, 0xd9,
	0x97, 0x82, 0x7c, 0x96, 0x82, 0xbc, 0x55, 0xa2, 0xb3, 0xaf, 0x44, 0xe7, 0xa3, 0x12, 0x1d, 0xca,
	0xc1, 0x26, 0x1e, 0x0e, 0xc8, 0xe5, 0x5a, 0x5b, 0xaf, 0x88, 0xbc, 0xe6, 0x3a, 0x8b, 0xe9, 0xb2,
	0xa5, 0x8b, 0x7a, 0xff, 0xcb, 0x5f, 0x0d, 0x6c, 0xe2, 0xff, 0xc6, 0xdb, 0x04, 0xfc, 0x22, 0xf2,
	0xf1, 0xba, 0x09, 0xf8, 0xcd, 0x03, 0xd1, 0x00, 0xf3, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x14, 0xf9, 0x7b, 0xce, 0x8c, 0x01, 0x00, 0x00,
}

func (m *ContractEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventData) > 0 {
		for iNdEx := len(m.EventData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.EventData[iNdEx])
			copy(dAtA[i:], m.EventData[iNdEx])
			i = encodeVarintContractEvent(dAtA, i, uint64(len(m.EventData[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintContractEvent(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintContractEvent(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintContractEvent(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintContractEvent(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintContractEvent(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintContractEvent(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintContractEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovContractEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovContractEvent(uint64(m.BlockHeight))
	}
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovContractEvent(uint64(l))
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovContractEvent(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovContractEvent(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovContractEvent(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovContractEvent(uint64(l))
	}
	if len(m.EventData) > 0 {
		for _, s := range m.EventData {
			l = len(s)
			n += 1 + l + sovContractEvent(uint64(l))
		}
	}
	return n
}

func sovContractEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContractEvent(x uint64) (n int) {
	return sovContractEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContractEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContractEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContractEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventData = append(m.EventData, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContractEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContractEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContractEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContractEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContractEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContractEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContractEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContractEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContractEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContractEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContractEvent = fmt.Errorf("proto: unexpected end of group")
)
