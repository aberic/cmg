// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/result.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TxStatusCode describes the tx status in tx result
type TxStatusCode int32

const (
	TxStatusCode_SUCCESS                                   TxStatusCode = 0
	TxStatusCode_TIMEOUT                                   TxStatusCode = 1
	TxStatusCode_INVALID_PARAMETER                         TxStatusCode = 2
	TxStatusCode_NO_PERMISSION                             TxStatusCode = 3
	TxStatusCode_CONTRACT_FAIL                             TxStatusCode = 4
	TxStatusCode_INTERNAL_ERROR                            TxStatusCode = 5
	TxStatusCode_INVALID_CONTRACT_TRANSACTION_TYPE         TxStatusCode = 10
	TxStatusCode_INVALID_CONTRACT_PARAMETER_CONTRACT_NAME  TxStatusCode = 11
	TxStatusCode_INVALID_CONTRACT_PARAMETER_METHOD         TxStatusCode = 12
	TxStatusCode_INVALID_CONTRACT_PARAMETER_INIT_METHOD    TxStatusCode = 13
	TxStatusCode_INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD TxStatusCode = 14
	TxStatusCode_INVALID_CONTRACT_PARAMETER_BYTE_CODE      TxStatusCode = 15
	TxStatusCode_INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE   TxStatusCode = 16
	TxStatusCode_INVALID_CONTRACT_PARAMETER_VERSION        TxStatusCode = 17
	TxStatusCode_GET_FROM_TX_CONTEXT_FAILED                TxStatusCode = 20
	TxStatusCode_PUT_INTO_TX_CONTEXT_FAILED                TxStatusCode = 21
	TxStatusCode_CONTRACT_VERSION_EXIST_FAILED             TxStatusCode = 22
	TxStatusCode_CONTRACT_VERSION_NOT_EXIST_FAILED         TxStatusCode = 23
	TxStatusCode_CONTRACT_BYTE_CODE_NOT_EXIST_FAILED       TxStatusCode = 24
	TxStatusCode_MARSHAL_SENDER_FAILED                     TxStatusCode = 25
	TxStatusCode_INVOKE_INIT_METHOD_FAILED                 TxStatusCode = 26
	TxStatusCode_INVOKE_UPGRADE_METHOD_FAILED              TxStatusCode = 27
	TxStatusCode_CREATE_RUNTIME_INSTANCE_FAILED            TxStatusCode = 28
	TxStatusCode_UNMARSHAL_CREATOR_FAILED                  TxStatusCode = 29
	TxStatusCode_UNMARSHAL_SENDER_FAILED                   TxStatusCode = 30
	TxStatusCode_GET_SENDER_PK_FAILED                      TxStatusCode = 31
	TxStatusCode_GET_CREATOR_PK_FAILED                     TxStatusCode = 32
	TxStatusCode_GET_CREATOR_FAILED                        TxStatusCode = 33
	TxStatusCode_GET_CREATOR_CERT_FAILED                   TxStatusCode = 34
	TxStatusCode_GET_SENDER_CERT_FAILED                    TxStatusCode = 35
	TxStatusCode_CONTRACT_FREEZE_FAILED                    TxStatusCode = 36
	TxStatusCode_CONTRACT_TOO_DEEP_FAILED                  TxStatusCode = 37
	TxStatusCode_CONTRACT_REVOKE_FAILED                    TxStatusCode = 38
	TxStatusCode_CONTRACT_INVOKE_METHOD_FAILED             TxStatusCode = 39
)

var TxStatusCode_name = map[int32]string{
	0:  "SUCCESS",
	1:  "TIMEOUT",
	2:  "INVALID_PARAMETER",
	3:  "NO_PERMISSION",
	4:  "CONTRACT_FAIL",
	5:  "INTERNAL_ERROR",
	10: "INVALID_CONTRACT_TRANSACTION_TYPE",
	11: "INVALID_CONTRACT_PARAMETER_CONTRACT_NAME",
	12: "INVALID_CONTRACT_PARAMETER_METHOD",
	13: "INVALID_CONTRACT_PARAMETER_INIT_METHOD",
	14: "INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD",
	15: "INVALID_CONTRACT_PARAMETER_BYTE_CODE",
	16: "INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE",
	17: "INVALID_CONTRACT_PARAMETER_VERSION",
	20: "GET_FROM_TX_CONTEXT_FAILED",
	21: "PUT_INTO_TX_CONTEXT_FAILED",
	22: "CONTRACT_VERSION_EXIST_FAILED",
	23: "CONTRACT_VERSION_NOT_EXIST_FAILED",
	24: "CONTRACT_BYTE_CODE_NOT_EXIST_FAILED",
	25: "MARSHAL_SENDER_FAILED",
	26: "INVOKE_INIT_METHOD_FAILED",
	27: "INVOKE_UPGRADE_METHOD_FAILED",
	28: "CREATE_RUNTIME_INSTANCE_FAILED",
	29: "UNMARSHAL_CREATOR_FAILED",
	30: "UNMARSHAL_SENDER_FAILED",
	31: "GET_SENDER_PK_FAILED",
	32: "GET_CREATOR_PK_FAILED",
	33: "GET_CREATOR_FAILED",
	34: "GET_CREATOR_CERT_FAILED",
	35: "GET_SENDER_CERT_FAILED",
	36: "CONTRACT_FREEZE_FAILED",
	37: "CONTRACT_TOO_DEEP_FAILED",
	38: "CONTRACT_REVOKE_FAILED",
	39: "CONTRACT_INVOKE_METHOD_FAILED",
}

var TxStatusCode_value = map[string]int32{
	"SUCCESS":                           0,
	"TIMEOUT":                           1,
	"INVALID_PARAMETER":                 2,
	"NO_PERMISSION":                     3,
	"CONTRACT_FAIL":                     4,
	"INTERNAL_ERROR":                    5,
	"INVALID_CONTRACT_TRANSACTION_TYPE": 10,
	"INVALID_CONTRACT_PARAMETER_CONTRACT_NAME":  11,
	"INVALID_CONTRACT_PARAMETER_METHOD":         12,
	"INVALID_CONTRACT_PARAMETER_INIT_METHOD":    13,
	"INVALID_CONTRACT_PARAMETER_UPGRADE_METHOD": 14,
	"INVALID_CONTRACT_PARAMETER_BYTE_CODE":      15,
	"INVALID_CONTRACT_PARAMETER_RUNTIME_TYPE":   16,
	"INVALID_CONTRACT_PARAMETER_VERSION":        17,
	"GET_FROM_TX_CONTEXT_FAILED":                20,
	"PUT_INTO_TX_CONTEXT_FAILED":                21,
	"CONTRACT_VERSION_EXIST_FAILED":             22,
	"CONTRACT_VERSION_NOT_EXIST_FAILED":         23,
	"CONTRACT_BYTE_CODE_NOT_EXIST_FAILED":       24,
	"MARSHAL_SENDER_FAILED":                     25,
	"INVOKE_INIT_METHOD_FAILED":                 26,
	"INVOKE_UPGRADE_METHOD_FAILED":              27,
	"CREATE_RUNTIME_INSTANCE_FAILED":            28,
	"UNMARSHAL_CREATOR_FAILED":                  29,
	"UNMARSHAL_SENDER_FAILED":                   30,
	"GET_SENDER_PK_FAILED":                      31,
	"GET_CREATOR_PK_FAILED":                     32,
	"GET_CREATOR_FAILED":                        33,
	"GET_CREATOR_CERT_FAILED":                   34,
	"GET_SENDER_CERT_FAILED":                    35,
	"CONTRACT_FREEZE_FAILED":                    36,
	"CONTRACT_TOO_DEEP_FAILED":                  37,
	"CONTRACT_REVOKE_FAILED":                    38,
	"CONTRACT_INVOKE_METHOD_FAILED":             39,
}

func (x TxStatusCode) String() string {
	return proto.EnumName(TxStatusCode_name, int32(x))
}

func (TxStatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{0}
}

// returned by contract
type ContractResultCode int32

const (
	ContractResultCode_OK   ContractResultCode = 0
	ContractResultCode_FAIL ContractResultCode = 1
)

var ContractResultCode_name = map[int32]string{
	0: "OK",
	1: "FAIL",
}

var ContractResultCode_value = map[string]int32{
	"OK":   0,
	"FAIL": 1,
}

func (x ContractResultCode) String() string {
	return proto.EnumName(ContractResultCode_name, int32(x))
}

func (ContractResultCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{1}
}

// tx request - tx response, only for RPC response
type TxResponse struct {
	// response code
	Code TxStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=common.TxStatusCode" json:"code,omitempty"`
	// response message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// returned data, set in smart contract
	ContractResult *ContractResult `protobuf:"bytes,3,opt,name=contract_result,json=contractResult,proto3" json:"contract_result,omitempty"`
}

func (m *TxResponse) Reset()         { *m = TxResponse{} }
func (m *TxResponse) String() string { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()    {}
func (*TxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{0}
}
func (m *TxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResponse.Merge(m, src)
}
func (m *TxResponse) XXX_Size() int {
	return m.Size()
}
func (m *TxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxResponse proto.InternalMessageInfo

func (m *TxResponse) GetCode() TxStatusCode {
	if m != nil {
		return m.Code
	}
	return TxStatusCode_SUCCESS
}

func (m *TxResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *TxResponse) GetContractResult() *ContractResult {
	if m != nil {
		return m.ContractResult
	}
	return nil
}

type SubscribeResult struct {
	// when TxType == SUBSCRIBE_BLOCK_INFO, data type is pb.BlockInfo;
	// when TxType == SUBSCRIBE_TX_INFOï¼Œdata type is pb.Transaction.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *SubscribeResult) Reset()         { *m = SubscribeResult{} }
func (m *SubscribeResult) String() string { return proto.CompactTextString(m) }
func (*SubscribeResult) ProtoMessage()    {}
func (*SubscribeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{1}
}
func (m *SubscribeResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SubscribeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SubscribeResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SubscribeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResult.Merge(m, src)
}
func (m *SubscribeResult) XXX_Size() int {
	return m.Size()
}
func (m *SubscribeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResult.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResult proto.InternalMessageInfo

func (m *SubscribeResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// tx result, part of a transaction in block
type Result struct {
	// response code
	Code TxStatusCode `protobuf:"varint,1,opt,name=code,proto3,enum=common.TxStatusCode" json:"code,omitempty"`
	// returned data, set in smart contract
	ContractResult *ContractResult `protobuf:"bytes,2,opt,name=contract_result,json=contractResult,proto3" json:"contract_result,omitempty"`
	// hash of the transaction's read-write set
	RwSetHash []byte `protobuf:"bytes,3,opt,name=rw_set_hash,json=rwSetHash,proto3" json:"rw_set_hash,omitempty"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{2}
}
func (m *Result) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Result.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return m.Size()
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() TxStatusCode {
	if m != nil {
		return m.Code
	}
	return TxStatusCode_SUCCESS
}

func (m *Result) GetContractResult() *ContractResult {
	if m != nil {
		return m.ContractResult
	}
	return nil
}

func (m *Result) GetRwSetHash() []byte {
	if m != nil {
		return m.RwSetHash
	}
	return nil
}

// invoke user contract method return UserContractReturnPayload
// Unmarshal from TransactResult.TxResponse.payload
type ContractResult struct {
	// user contract defined return code, 0-ok, 1-error. for example, insufficient balance in token transfer
	Code ContractResultCode `protobuf:"varint,1,opt,name=code,proto3,enum=common.ContractResultCode" json:"code,omitempty"`
	// user contract defined result
	Result []byte `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// user contract defined result message
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// gas used by current contract(include contract call)
	GasUsed int64 `protobuf:"varint,4,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
}

func (m *ContractResult) Reset()         { *m = ContractResult{} }
func (m *ContractResult) String() string { return proto.CompactTextString(m) }
func (*ContractResult) ProtoMessage()    {}
func (*ContractResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{3}
}
func (m *ContractResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractResult.Merge(m, src)
}
func (m *ContractResult) XXX_Size() int {
	return m.Size()
}
func (m *ContractResult) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractResult.DiscardUnknown(m)
}

var xxx_messageInfo_ContractResult proto.InternalMessageInfo

func (m *ContractResult) GetCode() ContractResultCode {
	if m != nil {
		return m.Code
	}
	return ContractResultCode_OK
}

func (m *ContractResult) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ContractResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *ContractResult) GetGasUsed() int64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

// certificate collection
type CertInfos struct {
	CertInfos []*CertInfo `protobuf:"bytes,1,rep,name=cert_infos,json=certInfos,proto3" json:"cert_infos,omitempty"`
}

func (m *CertInfos) Reset()         { *m = CertInfos{} }
func (m *CertInfos) String() string { return proto.CompactTextString(m) }
func (*CertInfos) ProtoMessage()    {}
func (*CertInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{4}
}
func (m *CertInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertInfos.Merge(m, src)
}
func (m *CertInfos) XXX_Size() int {
	return m.Size()
}
func (m *CertInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_CertInfos.DiscardUnknown(m)
}

var xxx_messageInfo_CertInfos proto.InternalMessageInfo

func (m *CertInfos) GetCertInfos() []*CertInfo {
	if m != nil {
		return m.CertInfos
	}
	return nil
}

// certificate information
type CertInfo struct {
	// certificate hash
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// certificate contents
	Cert []byte `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *CertInfo) Reset()         { *m = CertInfo{} }
func (m *CertInfo) String() string { return proto.CompactTextString(m) }
func (*CertInfo) ProtoMessage()    {}
func (*CertInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_732b559d725883cf, []int{5}
}
func (m *CertInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CertInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CertInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CertInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CertInfo.Merge(m, src)
}
func (m *CertInfo) XXX_Size() int {
	return m.Size()
}
func (m *CertInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CertInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CertInfo proto.InternalMessageInfo

func (m *CertInfo) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *CertInfo) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func init() {
	proto.RegisterEnum("common.TxStatusCode", TxStatusCode_name, TxStatusCode_value)
	proto.RegisterEnum("common.ContractResultCode", ContractResultCode_name, ContractResultCode_value)
	proto.RegisterType((*TxResponse)(nil), "common.TxResponse")
	proto.RegisterType((*SubscribeResult)(nil), "common.SubscribeResult")
	proto.RegisterType((*Result)(nil), "common.Result")
	proto.RegisterType((*ContractResult)(nil), "common.ContractResult")
	proto.RegisterType((*CertInfos)(nil), "common.CertInfos")
	proto.RegisterType((*CertInfo)(nil), "common.CertInfo")
}

func init() { proto.RegisterFile("common/result.proto", fileDescriptor_732b559d725883cf) }

var fileDescriptor_732b559d725883cf = []byte{
	// 869 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x51, 0x4f, 0xdb, 0x56,
	0x14, 0xc7, 0x31, 0xc9, 0x02, 0x9c, 0xa4, 0xc1, 0x9c, 0x41, 0x6a, 0x28, 0x78, 0xc1, 0x2d, 0x90,
	0xb1, 0x91, 0x48, 0xd9, 0xeb, 0xa4, 0xc9, 0x75, 0x6e, 0x8b, 0x05, 0xb9, 0x8e, 0xae, 0x6f, 0x10,
	0xed, 0x8b, 0xe5, 0x38, 0x6e, 0x40, 0x1d, 0x31, 0xb2, 0x8d, 0xda, 0x2f, 0x31, 0x69, 0xd3, 0xbe,
	0xce, 0x3e, 0xc0, 0x1e, 0xfb, 0xb8, 0xc7, 0x09, 0xbe, 0xc8, 0x64, 0xc7, 0x76, 0x6c, 0x81, 0xa2,
	0xf5, 0xcd, 0xe7, 0xfc, 0x7f, 0x3e, 0xf7, 0x7f, 0xff, 0x37, 0xd7, 0x81, 0x6f, 0x1d, 0xef, 0xe6,
	0xc6, 0x9b, 0x76, 0x7c, 0x37, 0xb8, 0xfb, 0x35, 0x6c, 0xdf, 0xfa, 0x5e, 0xe8, 0x61, 0x65, 0xd6,
	0x54, 0xfe, 0x10, 0x00, 0xf8, 0x67, 0xe6, 0x06, 0xb7, 0xde, 0x34, 0x70, 0xb1, 0x05, 0x65, 0xc7,
	0x1b, 0xbb, 0x92, 0xd0, 0x14, 0x5a, 0xf5, 0xee, 0x66, 0x7b, 0x46, 0xb5, 0xf9, 0x67, 0x33, 0xb4,
	0xc3, 0xbb, 0x40, 0xf3, 0xc6, 0x2e, 0x8b, 0x09, 0x94, 0x60, 0xe5, 0xc6, 0x0d, 0x02, 0x7b, 0xe2,
	0x4a, 0xcb, 0x4d, 0xa1, 0xb5, 0xc6, 0xd2, 0x12, 0x7f, 0x81, 0x75, 0xc7, 0x9b, 0x86, 0xbe, 0xed,
	0x84, 0xd6, 0x6c, 0x4d, 0xa9, 0xd4, 0x14, 0x5a, 0xd5, 0x6e, 0x23, 0x1d, 0xa7, 0x25, 0x32, 0x8b,
	0x55, 0x56, 0x77, 0x0a, 0xb5, 0x72, 0x00, 0xeb, 0xe6, 0xdd, 0x28, 0x70, 0xfc, 0xeb, 0x91, 0x3b,
	0x6b, 0x21, 0x42, 0x79, 0x6c, 0x87, 0x76, 0xec, 0xab, 0xc6, 0xe2, 0x67, 0xe5, 0x4f, 0x01, 0x2a,
	0x89, 0xfc, 0xff, 0x6d, 0x3f, 0x61, 0x6e, 0xf9, 0x6b, 0xcc, 0xa1, 0x0c, 0x55, 0xff, 0x93, 0x15,
	0xb8, 0xa1, 0x75, 0x65, 0x07, 0x57, 0xf1, 0xce, 0x6a, 0x6c, 0xcd, 0xff, 0x64, 0xba, 0xe1, 0xa9,
	0x1d, 0x5c, 0x29, 0xbf, 0x09, 0x50, 0x2f, 0x8e, 0xc0, 0x76, 0xc1, 0xdd, 0xce, 0xd3, 0x0b, 0xe5,
	0x3c, 0x36, 0xa0, 0x92, 0xb3, 0x56, 0x63, 0x49, 0x95, 0x8f, 0xbc, 0x54, 0x8c, 0x7c, 0x1b, 0x56,
	0x27, 0x76, 0x60, 0xdd, 0x05, 0xee, 0x58, 0x2a, 0x37, 0x85, 0x56, 0x89, 0xad, 0x4c, 0xec, 0x60,
	0x18, 0xb8, 0x63, 0xe5, 0x67, 0x58, 0xd3, 0x5c, 0x3f, 0xd4, 0xa7, 0x1f, 0xbc, 0x00, 0x3b, 0x00,
	0x8e, 0xeb, 0x87, 0xd6, 0x75, 0x54, 0x49, 0x42, 0xb3, 0xd4, 0xaa, 0x76, 0xc5, 0xcc, 0x4f, 0x82,
	0xb1, 0x35, 0x27, 0x7d, 0x41, 0xe9, 0xc2, 0x6a, 0xda, 0x8e, 0xce, 0x20, 0xde, 0xb2, 0x10, 0xaf,
	0x1d, 0x3f, 0x47, 0xbd, 0x08, 0x4e, 0x8c, 0xc6, 0xcf, 0xc7, 0x7f, 0xad, 0x42, 0x2d, 0x9f, 0x3c,
	0x56, 0x61, 0xc5, 0x1c, 0x6a, 0x1a, 0x31, 0x4d, 0x71, 0x29, 0x2a, 0xb8, 0xde, 0x27, 0xc6, 0x90,
	0x8b, 0x02, 0x6e, 0xc1, 0x86, 0x4e, 0x2f, 0xd4, 0x73, 0xbd, 0x67, 0x0d, 0x54, 0xa6, 0xf6, 0x09,
	0x27, 0x4c, 0x5c, 0xc6, 0x0d, 0x78, 0x46, 0x0d, 0x6b, 0x40, 0x58, 0x5f, 0x37, 0x4d, 0xdd, 0xa0,
	0x62, 0x29, 0x6a, 0x69, 0x06, 0xe5, 0x4c, 0xd5, 0xb8, 0xf5, 0x46, 0xd5, 0xcf, 0xc5, 0x32, 0x22,
	0xd4, 0x75, 0xca, 0x09, 0xa3, 0xea, 0xb9, 0x45, 0x18, 0x33, 0x98, 0xf8, 0x0d, 0x1e, 0xc0, 0x7e,
	0x3a, 0x30, 0xc3, 0x39, 0x53, 0xa9, 0xa9, 0x6a, 0x5c, 0x37, 0xa8, 0xc5, 0xdf, 0x0d, 0x88, 0x08,
	0xf8, 0x23, 0xb4, 0x1e, 0x61, 0x99, 0x81, 0x79, 0x8b, 0xaa, 0x7d, 0x22, 0x56, 0x9f, 0x1c, 0x3a,
	0xa7, 0xfb, 0x84, 0x9f, 0x1a, 0x3d, 0xb1, 0x86, 0xc7, 0x70, 0xb8, 0x00, 0xd3, 0xa9, 0xce, 0x53,
	0xf6, 0x19, 0x9e, 0xc0, 0xf7, 0x0b, 0xd8, 0xe1, 0xe0, 0x2d, 0x53, 0x7b, 0x24, 0xc5, 0xeb, 0xd8,
	0x82, 0x57, 0x0b, 0xf0, 0xd7, 0xef, 0x38, 0xb1, 0x34, 0xa3, 0x47, 0xc4, 0x75, 0xfc, 0x01, 0x8e,
	0x16, 0x90, 0x6c, 0x48, 0xa3, 0xf0, 0x67, 0x31, 0x88, 0x78, 0x08, 0xca, 0x02, 0xf8, 0x82, 0xb0,
	0x38, 0xfc, 0x0d, 0x94, 0x61, 0xe7, 0x2d, 0xe1, 0xd6, 0x1b, 0x66, 0xf4, 0x2d, 0x7e, 0x19, 0xb3,
	0xe4, 0x72, 0x76, 0x0e, 0xa4, 0x27, 0x6e, 0x46, 0xfa, 0x60, 0xc8, 0x2d, 0x9d, 0x72, 0xe3, 0x09,
	0x7d, 0x0b, 0xf7, 0x61, 0x2f, 0x9b, 0x9f, 0x4c, 0xb5, 0xc8, 0xa5, 0x6e, 0x66, 0x48, 0x23, 0xca,
	0xf8, 0x11, 0x42, 0x0d, 0x5e, 0xc4, 0x9e, 0xe3, 0x11, 0xbc, 0xcc, 0xb0, 0x6c, 0xdb, 0x8f, 0x41,
	0x09, 0xb7, 0x61, 0xab, 0xaf, 0x32, 0xf3, 0x54, 0x3d, 0xb7, 0x4c, 0x42, 0x7b, 0x84, 0xa5, 0xd2,
	0x36, 0xee, 0xc1, 0xb6, 0x4e, 0x2f, 0x8c, 0x33, 0x92, 0x3f, 0x93, 0x54, 0xde, 0xc1, 0x26, 0xec,
	0x26, 0x72, 0xf1, 0x18, 0x52, 0xe2, 0x05, 0x2a, 0x20, 0x6b, 0x8c, 0xa8, 0x9c, 0x64, 0x79, 0xea,
	0xd4, 0xe4, 0x2a, 0xd5, 0x48, 0xca, 0xec, 0xe2, 0x2e, 0x48, 0x43, 0x9a, 0x3a, 0x88, 0x69, 0x23,
	0xb3, 0xb0, 0x87, 0x2f, 0xe0, 0xf9, 0x5c, 0x2d, 0xfa, 0x93, 0x51, 0x82, 0xcd, 0x28, 0xed, 0xa4,
	0x3d, 0x38, 0x4b, 0x95, 0xef, 0xa2, 0x4d, 0x45, 0x4a, 0x3a, 0x6e, 0x2e, 0x35, 0xb1, 0x01, 0x98,
	0x97, 0x92, 0xfe, 0x7e, 0xb4, 0x52, 0xbe, 0xaf, 0x11, 0x96, 0x85, 0xa4, 0xe0, 0x0e, 0x34, 0x72,
	0x2b, 0xe5, 0xb5, 0x97, 0x91, 0x36, 0xbf, 0x70, 0x8c, 0x90, 0xf7, 0xd9, 0xe6, 0x5e, 0x45, 0x9b,
	0x9b, 0xdf, 0x2e, 0xc3, 0xb0, 0x7a, 0x84, 0x0c, 0x52, 0xf5, 0xa0, 0xf0, 0x26, 0x23, 0x71, 0x92,
	0x89, 0x76, 0x58, 0xf8, 0x25, 0x24, 0x29, 0x17, 0xd3, 0x3d, 0x3a, 0x3e, 0x04, 0x7c, 0xfc, 0x65,
	0xc4, 0x0a, 0x2c, 0x1b, 0x67, 0xe2, 0x12, 0xae, 0x42, 0x39, 0xbe, 0xfe, 0xc2, 0xeb, 0x0f, 0x7f,
	0xdf, 0xcb, 0xc2, 0x97, 0x7b, 0x59, 0xf8, 0xf7, 0x5e, 0x16, 0x7e, 0x7f, 0x90, 0x97, 0xbe, 0x3c,
	0xc8, 0x4b, 0xff, 0x3c, 0xc8, 0x4b, 0x20, 0x79, 0xfe, 0xa4, 0xed, 0x5c, 0xd9, 0xd7, 0xd3, 0x1b,
	0xfb, 0xa3, 0xeb, 0xb7, 0x6f, 0x47, 0xc9, 0x27, 0xee, 0x7d, 0x37, 0xd7, 0xf5, 0xfc, 0x49, 0x67,
	0x5e, 0x9e, 0x04, 0xe3, 0x8f, 0x27, 0x13, 0xaf, 0x73, 0x3b, 0xea, 0xc4, 0x7f, 0x90, 0x13, 0xaf,
	0x33, 0x7b, 0x67, 0x54, 0x89, 0xeb, 0x9f, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x82, 0x09, 0xe6,
	0xf7, 0x47, 0x07, 0x00, 0x00,
}

func (m *TxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContractResult != nil {
		{
			size, err := m.ContractResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResult(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SubscribeResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SubscribeResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SubscribeResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Result) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Result) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Result) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RwSetHash) > 0 {
		i -= len(m.RwSetHash)
		copy(dAtA[i:], m.RwSetHash)
		i = encodeVarintResult(dAtA, i, uint64(len(m.RwSetHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ContractResult != nil {
		{
			size, err := m.ContractResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintResult(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResult(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ContractResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasUsed != 0 {
		i = encodeVarintResult(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = encodeVarintResult(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CertInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertInfos) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertInfos) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertInfos) > 0 {
		for iNdEx := len(m.CertInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CertInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResult(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CertInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CertInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CertInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintResult(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResult(dAtA []byte, offset int, v uint64) int {
	offset -= sovResult(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResult(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	if m.ContractResult != nil {
		l = m.ContractResult.Size()
		n += 1 + l + sovResult(uint64(l))
	}
	return n
}

func (m *SubscribeResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	return n
}

func (m *Result) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResult(uint64(m.Code))
	}
	if m.ContractResult != nil {
		l = m.ContractResult.Size()
		n += 1 + l + sovResult(uint64(l))
	}
	l = len(m.RwSetHash)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	return n
}

func (m *ContractResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovResult(uint64(m.Code))
	}
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	if m.GasUsed != 0 {
		n += 1 + sovResult(uint64(m.GasUsed))
	}
	return n
}

func (m *CertInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CertInfos) > 0 {
		for _, e := range m.CertInfos {
			l = e.Size()
			n += 1 + l + sovResult(uint64(l))
		}
	}
	return n
}

func (m *CertInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovResult(uint64(l))
	}
	return n
}

func sovResult(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResult(x uint64) (n int) {
	return sovResult(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= TxStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractResult == nil {
				m.ContractResult = &ContractResult{}
			}
			if err := m.ContractResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Result) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Result: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Result: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= TxStatusCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractResult == nil {
				m.ContractResult = &ContractResult{}
			}
			if err := m.ContractResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RwSetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RwSetHash = append(m.RwSetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RwSetHash == nil {
				m.RwSetHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= ContractResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = append(m.Result[:0], dAtA[iNdEx:postIndex]...)
			if m.Result == nil {
				m.Result = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertInfos = append(m.CertInfos, &CertInfo{})
			if err := m.CertInfos[len(m.CertInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CertInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResult
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CertInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CertInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResult
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthResult
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthResult
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = append(m.Cert[:0], dAtA[iNdEx:postIndex]...)
			if m.Cert == nil {
				m.Cert = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResult(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResult
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResult(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResult
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResult
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResult
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResult
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResult
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResult        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResult          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResult = fmt.Errorf("proto: unexpected end of group")
)
