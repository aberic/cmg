// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/contract.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContractName int32

const (
	// system chain configuration contract
	// used to add, delete and change the chain configuration
	ContractName_SYSTEM_CONTRACT_CHAIN_CONFIG ContractName = 0
	// system chain query contract
	// used to query the configuration on the chain
	ContractName_SYSTEM_CONTRACT_QUERY ContractName = 1
	// system certificate storage contract
	// used to manage certificates
	ContractName_SYSTEM_CONTRACT_CERT_MANAGE ContractName = 2
	// governance contract
	ContractName_SYSTEM_CONTRACT_GOVERNANCE ContractName = 3
	// multi signature contract on chain
	ContractName_SYSTEM_CONTRACT_MULTI_SIGN ContractName = 4
	// contract state
	ContractName_SYSTEM_CONTRACT_STATE ContractName = 5
	// private compute contract
	ContractName_SYSTEM_CONTRACT_PRIVATE_COMPUTE ContractName = 6
)

var ContractName_name = map[int32]string{
	0: "SYSTEM_CONTRACT_CHAIN_CONFIG",
	1: "SYSTEM_CONTRACT_QUERY",
	2: "SYSTEM_CONTRACT_CERT_MANAGE",
	3: "SYSTEM_CONTRACT_GOVERNANCE",
	4: "SYSTEM_CONTRACT_MULTI_SIGN",
	5: "SYSTEM_CONTRACT_STATE",
	6: "SYSTEM_CONTRACT_PRIVATE_COMPUTE",
}

var ContractName_value = map[string]int32{
	"SYSTEM_CONTRACT_CHAIN_CONFIG":    0,
	"SYSTEM_CONTRACT_QUERY":           1,
	"SYSTEM_CONTRACT_CERT_MANAGE":     2,
	"SYSTEM_CONTRACT_GOVERNANCE":      3,
	"SYSTEM_CONTRACT_MULTI_SIGN":      4,
	"SYSTEM_CONTRACT_STATE":           5,
	"SYSTEM_CONTRACT_PRIVATE_COMPUTE": 6,
}

func (x ContractName) String() string {
	return proto.EnumName(ContractName_name, int32(x))
}

func (ContractName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{0}
}

type QueryFunction int32

const (
	// get block by transactionId
	QueryFunction_GET_BLOCK_BY_TX_ID QueryFunction = 0
	// get contract information
	QueryFunction_GET_CONTRACT_INFO QueryFunction = 1
	// get transaction by transactionId
	QueryFunction_GET_TX_BY_TX_ID QueryFunction = 2
	// get block by block height
	QueryFunction_GET_BLOCK_BY_HEIGHT QueryFunction = 3
	// get chain information
	QueryFunction_GET_CHAIN_INFO QueryFunction = 4
	// get the last configuration block
	QueryFunction_GET_LAST_CONFIG_BLOCK QueryFunction = 5
	// get block by block hash
	QueryFunction_GET_BLOCK_BY_HASH QueryFunction = 6
	// get the list of node
	QueryFunction_GET_NODE_CHAIN_LIST QueryFunction = 7
	// get governance information
	QueryFunction_GET_GOVERNANCE_CONTRACT QueryFunction = 8
	// get read/write set information by eight
	QueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT QueryFunction = 9
	// get read/write set information by hash
	QueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HASH QueryFunction = 10
	// get the last block
	QueryFunction_GET_LAST_BLOCK QueryFunction = 11
	// get full block by height
	QueryFunction_GET_FULL_BLOCK_BY_HEIGHT QueryFunction = 12
	// get block height by tx id
	QueryFunction_GET_BLOCK_HEIGHT_BY_TX_ID QueryFunction = 13
	// get block height by hash
	QueryFunction_GET_BLOCK_HEIGHT_BY_HASH QueryFunction = 14
	//get block header by height
	QueryFunction_GET_BLOCK_HEADER_BY_HEIGHT QueryFunction = 15
	// get archived block height
	QueryFunction_GET_ARCHIVED_BLOCK_HEIGHT QueryFunction = 16
)

var QueryFunction_name = map[int32]string{
	0:  "GET_BLOCK_BY_TX_ID",
	1:  "GET_CONTRACT_INFO",
	2:  "GET_TX_BY_TX_ID",
	3:  "GET_BLOCK_BY_HEIGHT",
	4:  "GET_CHAIN_INFO",
	5:  "GET_LAST_CONFIG_BLOCK",
	6:  "GET_BLOCK_BY_HASH",
	7:  "GET_NODE_CHAIN_LIST",
	8:  "GET_GOVERNANCE_CONTRACT",
	9:  "GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT",
	10: "GET_BLOCK_WITH_TXRWSETS_BY_HASH",
	11: "GET_LAST_BLOCK",
	12: "GET_FULL_BLOCK_BY_HEIGHT",
	13: "GET_BLOCK_HEIGHT_BY_TX_ID",
	14: "GET_BLOCK_HEIGHT_BY_HASH",
	15: "GET_BLOCK_HEADER_BY_HEIGHT",
	16: "GET_ARCHIVED_BLOCK_HEIGHT",
}

var QueryFunction_value = map[string]int32{
	"GET_BLOCK_BY_TX_ID":                0,
	"GET_CONTRACT_INFO":                 1,
	"GET_TX_BY_TX_ID":                   2,
	"GET_BLOCK_BY_HEIGHT":               3,
	"GET_CHAIN_INFO":                    4,
	"GET_LAST_CONFIG_BLOCK":             5,
	"GET_BLOCK_BY_HASH":                 6,
	"GET_NODE_CHAIN_LIST":               7,
	"GET_GOVERNANCE_CONTRACT":           8,
	"GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT": 9,
	"GET_BLOCK_WITH_TXRWSETS_BY_HASH":   10,
	"GET_LAST_BLOCK":                    11,
	"GET_FULL_BLOCK_BY_HEIGHT":          12,
	"GET_BLOCK_HEIGHT_BY_TX_ID":         13,
	"GET_BLOCK_HEIGHT_BY_HASH":          14,
	"GET_BLOCK_HEADER_BY_HEIGHT":        15,
	"GET_ARCHIVED_BLOCK_HEIGHT":         16,
}

func (x QueryFunction) String() string {
	return proto.EnumName(QueryFunction_name, int32(x))
}

func (QueryFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{1}
}

// smart contract runtime, contains vm type and language type
type RuntimeType int32

const (
	RuntimeType_INVALID RuntimeType = 0
	// native implement in chainmaker-go
	RuntimeType_NATIVE RuntimeType = 1
	// vm-wasmer, language-c++
	RuntimeType_WASMER RuntimeType = 2
	// vm-wxvm, language-cpp
	RuntimeType_WXVM RuntimeType = 3
	// wasm interpreter in go
	RuntimeType_GASM RuntimeType = 4
	// vm-evm
	RuntimeType_EVM RuntimeType = 5
	// vm-docker, language-golang
	RuntimeType_DOCKER_GO RuntimeType = 6
	// vm-docker, language-java
	RuntimeType_DOCKER_JAVA RuntimeType = 7
)

var RuntimeType_name = map[int32]string{
	0: "INVALID",
	1: "NATIVE",
	2: "WASMER",
	3: "WXVM",
	4: "GASM",
	5: "EVM",
	6: "DOCKER_GO",
	7: "DOCKER_JAVA",
}

var RuntimeType_value = map[string]int32{
	"INVALID":     0,
	"NATIVE":      1,
	"WASMER":      2,
	"WXVM":        3,
	"GASM":        4,
	"EVM":         5,
	"DOCKER_GO":   6,
	"DOCKER_JAVA": 7,
}

func (x RuntimeType) String() string {
	return proto.EnumName(RuntimeType_name, int32(x))
}

func (RuntimeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{2}
}

type ConfigFunction int32

const (
	// get chain configuration
	ConfigFunction_GET_CHAIN_CONFIG ConfigFunction = 0
	// get the latest configuration block
	// the incoming blockheight must exist in the database
	// 如果传入的blockHeight是配置块，直接返回当前的配置信息
	ConfigFunction_GET_CHAIN_CONFIG_AT ConfigFunction = 1
	// update core
	ConfigFunction_CORE_UPDATE ConfigFunction = 2
	// update block
	ConfigFunction_BLOCK_UPDATE ConfigFunction = 3
	// add trusted certficate (org_id and root)
	ConfigFunction_TRUST_ROOT_ADD ConfigFunction = 4
	// [self] modify an individual's own trusted root certificate [org_id must exist in the original trust_roots,
	// and the new root certificate must be different from other certificates]
	ConfigFunction_TRUST_ROOT_UPDATE ConfigFunction = 5
	// delete trusted root certificate [org_ ID should be in trust_ The nodes in nodes need to be deleted]
	ConfigFunction_TRUST_ROOT_DELETE ConfigFunction = 6
	// organization add node address
	// org_id must already exist in nodes，you can add addresses in batches
	// the parameter is addresses. Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	// Deprecated , replace by NODE_ID_ADD
	ConfigFunction_NODE_ADDR_ADD ConfigFunction = 7
	// [self]the organization updates an address
	//[org_id and address must already exist in nodes, new_address is the new address. ip+port and peerId cannot be duplicated]
	// Deprecated , replace by NODE_ID_UPDATE
	ConfigFunction_NODE_ADDR_UPDATE ConfigFunction = 8
	// organization delete node address [org_id and address must already exist in nodes]
	// Deprecated , replace by NODE_ID_DELETE
	ConfigFunction_NODE_ADDR_DELETE ConfigFunction = 9
	// organization add node address in batches [org_id在nodes不存在，批量添加地址，参数为node_ids，单地址用逗号","隔开。nodeId不能重复]
	ConfigFunction_NODE_ORG_ADD ConfigFunction = 10
	// organization update
	// org_id must already exist in nodes，the parameter is addresses，Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	ConfigFunction_NODE_ORG_UPDATE ConfigFunction = 11
	// organization delete, org_id must already exist in nodes
	ConfigFunction_NODE_ORG_DELETE ConfigFunction = 12
	// add consensus parameters, key is not exit in ext_config
	ConfigFunction_CONSENSUS_EXT_ADD ConfigFunction = 13
	// update onsensus parameters, key exit in ext_config
	ConfigFunction_CONSENSUS_EXT_UPDATE ConfigFunction = 14
	// delete onsensus parameters, key exit in ext_config
	ConfigFunction_CONSENSUS_EXT_DELETE ConfigFunction = 15
	// add permission
	ConfigFunction_PERMISSION_ADD ConfigFunction = 16
	// update permission
	ConfigFunction_PERMISSION_UPDATE ConfigFunction = 17
	// delete permission
	ConfigFunction_PERMISSION_DELETE ConfigFunction = 18
	// organization add node_id
	// org_id must already exist in nodes，you can add node_id in batches
	// the parameter is node_ids. Single node_ids are separated by ","
	// node_id cannot be repeated
	ConfigFunction_NODE_ID_ADD ConfigFunction = 19
	// [self]the organization updates a node_ids
	//[org_id and node_ids must already exist in nodes, new_node_id is the new node_id. node_id cannot be duplicated]
	ConfigFunction_NODE_ID_UPDATE ConfigFunction = 20
	// organization delete node_id [org_id and node_id must already exist in nodes]
	ConfigFunction_NODE_ID_DELETE ConfigFunction = 21
)

var ConfigFunction_name = map[int32]string{
	0:  "GET_CHAIN_CONFIG",
	1:  "GET_CHAIN_CONFIG_AT",
	2:  "CORE_UPDATE",
	3:  "BLOCK_UPDATE",
	4:  "TRUST_ROOT_ADD",
	5:  "TRUST_ROOT_UPDATE",
	6:  "TRUST_ROOT_DELETE",
	7:  "NODE_ADDR_ADD",
	8:  "NODE_ADDR_UPDATE",
	9:  "NODE_ADDR_DELETE",
	10: "NODE_ORG_ADD",
	11: "NODE_ORG_UPDATE",
	12: "NODE_ORG_DELETE",
	13: "CONSENSUS_EXT_ADD",
	14: "CONSENSUS_EXT_UPDATE",
	15: "CONSENSUS_EXT_DELETE",
	16: "PERMISSION_ADD",
	17: "PERMISSION_UPDATE",
	18: "PERMISSION_DELETE",
	19: "NODE_ID_ADD",
	20: "NODE_ID_UPDATE",
	21: "NODE_ID_DELETE",
}

var ConfigFunction_value = map[string]int32{
	"GET_CHAIN_CONFIG":     0,
	"GET_CHAIN_CONFIG_AT":  1,
	"CORE_UPDATE":          2,
	"BLOCK_UPDATE":         3,
	"TRUST_ROOT_ADD":       4,
	"TRUST_ROOT_UPDATE":    5,
	"TRUST_ROOT_DELETE":    6,
	"NODE_ADDR_ADD":        7,
	"NODE_ADDR_UPDATE":     8,
	"NODE_ADDR_DELETE":     9,
	"NODE_ORG_ADD":         10,
	"NODE_ORG_UPDATE":      11,
	"NODE_ORG_DELETE":      12,
	"CONSENSUS_EXT_ADD":    13,
	"CONSENSUS_EXT_UPDATE": 14,
	"CONSENSUS_EXT_DELETE": 15,
	"PERMISSION_ADD":       16,
	"PERMISSION_UPDATE":    17,
	"PERMISSION_DELETE":    18,
	"NODE_ID_ADD":          19,
	"NODE_ID_UPDATE":       20,
	"NODE_ID_DELETE":       21,
}

func (x ConfigFunction) String() string {
	return proto.EnumName(ConfigFunction_name, int32(x))
}

func (ConfigFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{3}
}

// Methods of certificate management
type CertManageFunction int32

const (
	// add certficate
	CertManageFunction_CERT_ADD CertManageFunction = 0
	// delete certficate
	CertManageFunction_CERTS_DELETE CertManageFunction = 1
	// query certficate
	CertManageFunction_CERTS_QUERY CertManageFunction = 2
	// freeze certificate
	CertManageFunction_CERTS_FREEZE CertManageFunction = 3
	// unfreezing certificate
	CertManageFunction_CERTS_UNFREEZE CertManageFunction = 4
	// Revocation of certificate
	CertManageFunction_CERTS_REVOKE CertManageFunction = 5
)

var CertManageFunction_name = map[int32]string{
	0: "CERT_ADD",
	1: "CERTS_DELETE",
	2: "CERTS_QUERY",
	3: "CERTS_FREEZE",
	4: "CERTS_UNFREEZE",
	5: "CERTS_REVOKE",
}

var CertManageFunction_value = map[string]int32{
	"CERT_ADD":       0,
	"CERTS_DELETE":   1,
	"CERTS_QUERY":    2,
	"CERTS_FREEZE":   3,
	"CERTS_UNFREEZE": 4,
	"CERTS_REVOKE":   5,
}

func (x CertManageFunction) String() string {
	return proto.EnumName(CertManageFunction_name, int32(x))
}

func (CertManageFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{4}
}

// methods of managing multi signature
type MultiSignFunction int32

const (
	// multi signature request
	MultiSignFunction_REQ MultiSignFunction = 0
	// multi signature voting
	MultiSignFunction_VOTE MultiSignFunction = 1
	// multi signature query
	MultiSignFunction_QUERY MultiSignFunction = 2
)

var MultiSignFunction_name = map[int32]string{
	0: "REQ",
	1: "VOTE",
	2: "QUERY",
}

var MultiSignFunction_value = map[string]int32{
	"REQ":   0,
	"VOTE":  1,
	"QUERY": 2,
}

func (x MultiSignFunction) String() string {
	return proto.EnumName(MultiSignFunction_name, int32(x))
}

func (MultiSignFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{5}
}

// methods of user management contract
type ManageUserContractFunction int32

const (
	// init contract
	ManageUserContractFunction_INIT_CONTRACT ManageUserContractFunction = 0
	// upgrade contract
	ManageUserContractFunction_UPGRADE_CONTRACT ManageUserContractFunction = 1
	// freeze  contract
	ManageUserContractFunction_FREEZE_CONTRACT ManageUserContractFunction = 2
	// unfreezing contract
	ManageUserContractFunction_UNFREEZE_CONTRACT ManageUserContractFunction = 3
	// Revocation of contract
	ManageUserContractFunction_REVOKE_CONTRACT ManageUserContractFunction = 4
)

var ManageUserContractFunction_name = map[int32]string{
	0: "INIT_CONTRACT",
	1: "UPGRADE_CONTRACT",
	2: "FREEZE_CONTRACT",
	3: "UNFREEZE_CONTRACT",
	4: "REVOKE_CONTRACT",
}

var ManageUserContractFunction_value = map[string]int32{
	"INIT_CONTRACT":     0,
	"UPGRADE_CONTRACT":  1,
	"FREEZE_CONTRACT":   2,
	"UNFREEZE_CONTRACT": 3,
	"REVOKE_CONTRACT":   4,
}

func (x ManageUserContractFunction) String() string {
	return proto.EnumName(ManageUserContractFunction_name, int32(x))
}

func (ManageUserContractFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{6}
}

// methods of private compute contract
type PrivateComputeContractFunction int32

const (
	// get contract code
	PrivateComputeContractFunction_GET_CONTRACT PrivateComputeContractFunction = 0
	// get private data
	PrivateComputeContractFunction_GET_DATA PrivateComputeContractFunction = 1
	// save cert of tee
	PrivateComputeContractFunction_SAVE_CA_CERT PrivateComputeContractFunction = 2
	// save private data dir
	PrivateComputeContractFunction_SAVE_DIR PrivateComputeContractFunction = 3
	// save data of private computation result
	PrivateComputeContractFunction_SAVE_DATA PrivateComputeContractFunction = 4
	//save contract code
	PrivateComputeContractFunction_SAVE_CONTRACT PrivateComputeContractFunction = 5
	//save enclave report
	PrivateComputeContractFunction_SAVE_ENCLAVE_REPORT PrivateComputeContractFunction = 6
	//get enclave proof
	PrivateComputeContractFunction_GET_ENCLAVE_PROOF PrivateComputeContractFunction = 7
	//get cert of tee
	PrivateComputeContractFunction_GET_CA_CERT PrivateComputeContractFunction = 8
	//get private data dir
	PrivateComputeContractFunction_GET_DIR PrivateComputeContractFunction = 9
	//update contract
	PrivateComputeContractFunction_UPDATE_CONTRACT PrivateComputeContractFunction = 10
	//checkCallerCertAuth
	PrivateComputeContractFunction_CHECK_CALLER_CERT_AUTH           PrivateComputeContractFunction = 11
	PrivateComputeContractFunction_GET_ENCLAVE_ENCRYPT_PUB_KEY      PrivateComputeContractFunction = 12
	PrivateComputeContractFunction_GET_ENCLAVE_VERIFICATION_PUB_KEY PrivateComputeContractFunction = 13
	PrivateComputeContractFunction_GET_ENCLAVE_REPORT               PrivateComputeContractFunction = 14
	PrivateComputeContractFunction_GET_ENCLAVE_CHALLENGE            PrivateComputeContractFunction = 15
	PrivateComputeContractFunction_GET_ENCLAVE_SIGNATURE            PrivateComputeContractFunction = 16
	PrivateComputeContractFunction_SAVE_REMOTE_ATTESTATION          PrivateComputeContractFunction = 17
)

var PrivateComputeContractFunction_name = map[int32]string{
	0:  "GET_CONTRACT",
	1:  "GET_DATA",
	2:  "SAVE_CA_CERT",
	3:  "SAVE_DIR",
	4:  "SAVE_DATA",
	5:  "SAVE_CONTRACT",
	6:  "SAVE_ENCLAVE_REPORT",
	7:  "GET_ENCLAVE_PROOF",
	8:  "GET_CA_CERT",
	9:  "GET_DIR",
	10: "UPDATE_CONTRACT",
	11: "CHECK_CALLER_CERT_AUTH",
	12: "GET_ENCLAVE_ENCRYPT_PUB_KEY",
	13: "GET_ENCLAVE_VERIFICATION_PUB_KEY",
	14: "GET_ENCLAVE_REPORT",
	15: "GET_ENCLAVE_CHALLENGE",
	16: "GET_ENCLAVE_SIGNATURE",
	17: "SAVE_REMOTE_ATTESTATION",
}

var PrivateComputeContractFunction_value = map[string]int32{
	"GET_CONTRACT":                     0,
	"GET_DATA":                         1,
	"SAVE_CA_CERT":                     2,
	"SAVE_DIR":                         3,
	"SAVE_DATA":                        4,
	"SAVE_CONTRACT":                    5,
	"SAVE_ENCLAVE_REPORT":              6,
	"GET_ENCLAVE_PROOF":                7,
	"GET_CA_CERT":                      8,
	"GET_DIR":                          9,
	"UPDATE_CONTRACT":                  10,
	"CHECK_CALLER_CERT_AUTH":           11,
	"GET_ENCLAVE_ENCRYPT_PUB_KEY":      12,
	"GET_ENCLAVE_VERIFICATION_PUB_KEY": 13,
	"GET_ENCLAVE_REPORT":               14,
	"GET_ENCLAVE_CHALLENGE":            15,
	"GET_ENCLAVE_SIGNATURE":            16,
	"SAVE_REMOTE_ATTESTATION":          17,
}

func (x PrivateComputeContractFunction) String() string {
	return proto.EnumName(PrivateComputeContractFunction_name, int32(x))
}

func (PrivateComputeContractFunction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{7}
}

// the unique identifier of a smart contract
type ContractId struct {
	// smart contract name, set by contract creator, can have multiple versions
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// smart contract version, set by contract creator, name + version should be unique
	ContractVersion string `protobuf:"bytes,2,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// smart contract runtime type, set by contract creator
	RuntimeType RuntimeType `protobuf:"varint,3,opt,name=runtime_type,json=runtimeType,proto3,enum=common.RuntimeType" json:"runtime_type,omitempty"`
}

func (m *ContractId) Reset()         { *m = ContractId{} }
func (m *ContractId) String() string { return proto.CompactTextString(m) }
func (*ContractId) ProtoMessage()    {}
func (*ContractId) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{0}
}
func (m *ContractId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractId.Merge(m, src)
}
func (m *ContractId) XXX_Size() int {
	return m.Size()
}
func (m *ContractId) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractId.DiscardUnknown(m)
}

var xxx_messageInfo_ContractId proto.InternalMessageInfo

func (m *ContractId) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *ContractId) GetContractVersion() string {
	if m != nil {
		return m.ContractVersion
	}
	return ""
}

func (m *ContractId) GetRuntimeType() RuntimeType {
	if m != nil {
		return m.RuntimeType
	}
	return RuntimeType_INVALID
}

type ContractInfo struct {
	ContractTransaction []*ContractTransaction `protobuf:"bytes,1,rep,name=contract_transaction,json=contractTransaction,proto3" json:"contract_transaction,omitempty"`
}

func (m *ContractInfo) Reset()         { *m = ContractInfo{} }
func (m *ContractInfo) String() string { return proto.CompactTextString(m) }
func (*ContractInfo) ProtoMessage()    {}
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{1}
}
func (m *ContractInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractInfo.Merge(m, src)
}
func (m *ContractInfo) XXX_Size() int {
	return m.Size()
}
func (m *ContractInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ContractInfo proto.InternalMessageInfo

func (m *ContractInfo) GetContractTransaction() []*ContractTransaction {
	if m != nil {
		return m.ContractTransaction
	}
	return nil
}

type ContractTransaction struct {
	ContractId *ContractId `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	TxId       string      `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (m *ContractTransaction) Reset()         { *m = ContractTransaction{} }
func (m *ContractTransaction) String() string { return proto.CompactTextString(m) }
func (*ContractTransaction) ProtoMessage()    {}
func (*ContractTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{2}
}
func (m *ContractTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContractTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContractTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContractTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContractTransaction.Merge(m, src)
}
func (m *ContractTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ContractTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ContractTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ContractTransaction proto.InternalMessageInfo

func (m *ContractTransaction) GetContractId() *ContractId {
	if m != nil {
		return m.ContractId
	}
	return nil
}

func (m *ContractTransaction) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

type PrivateComputeRequest struct {
	SignPair []*SignInfo `protobuf:"bytes,1,rep,name=sign_pair,json=signPair,proto3" json:"sign_pair,omitempty"`
	Payload  *Payload    `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *PrivateComputeRequest) Reset()         { *m = PrivateComputeRequest{} }
func (m *PrivateComputeRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateComputeRequest) ProtoMessage()    {}
func (*PrivateComputeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{3}
}
func (m *PrivateComputeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateComputeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateComputeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateComputeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateComputeRequest.Merge(m, src)
}
func (m *PrivateComputeRequest) XXX_Size() int {
	return m.Size()
}
func (m *PrivateComputeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateComputeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateComputeRequest proto.InternalMessageInfo

func (m *PrivateComputeRequest) GetSignPair() []*SignInfo {
	if m != nil {
		return m.SignPair
	}
	return nil
}

func (m *PrivateComputeRequest) GetPayload() *Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

type Payload struct {
	PrivateRlpData string   `protobuf:"bytes,1,opt,name=private_rlp_data,json=privateRlpData,proto3" json:"private_rlp_data,omitempty"`
	Passwd         string   `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`
	SigAlgo        string   `protobuf:"bytes,3,opt,name=sig_algo,json=sigAlgo,proto3" json:"sig_algo,omitempty"`
	ContractName   string   `protobuf:"bytes,4,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	CodeHash       string   `protobuf:"bytes,5,opt,name=code_hash,json=codeHash,proto3" json:"code_hash,omitempty"`
	OrgId          []string `protobuf:"bytes,6,rep,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
}

func (m *Payload) Reset()         { *m = Payload{} }
func (m *Payload) String() string { return proto.CompactTextString(m) }
func (*Payload) ProtoMessage()    {}
func (*Payload) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{4}
}
func (m *Payload) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Payload) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Payload.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Payload) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Payload.Merge(m, src)
}
func (m *Payload) XXX_Size() int {
	return m.Size()
}
func (m *Payload) XXX_DiscardUnknown() {
	xxx_messageInfo_Payload.DiscardUnknown(m)
}

var xxx_messageInfo_Payload proto.InternalMessageInfo

func (m *Payload) GetPrivateRlpData() string {
	if m != nil {
		return m.PrivateRlpData
	}
	return ""
}

func (m *Payload) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *Payload) GetSigAlgo() string {
	if m != nil {
		return m.SigAlgo
	}
	return ""
}

func (m *Payload) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *Payload) GetCodeHash() string {
	if m != nil {
		return m.CodeHash
	}
	return ""
}

func (m *Payload) GetOrgId() []string {
	if m != nil {
		return m.OrgId
	}
	return nil
}

type SignInfo struct {
	ClientSign string `protobuf:"bytes,1,opt,name=client_sign,json=clientSign,proto3" json:"client_sign,omitempty"`
	Cert       string `protobuf:"bytes,2,opt,name=cert,proto3" json:"cert,omitempty"`
}

func (m *SignInfo) Reset()         { *m = SignInfo{} }
func (m *SignInfo) String() string { return proto.CompactTextString(m) }
func (*SignInfo) ProtoMessage()    {}
func (*SignInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1095c55e7168440, []int{5}
}
func (m *SignInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SignInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SignInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SignInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignInfo.Merge(m, src)
}
func (m *SignInfo) XXX_Size() int {
	return m.Size()
}
func (m *SignInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SignInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SignInfo proto.InternalMessageInfo

func (m *SignInfo) GetClientSign() string {
	if m != nil {
		return m.ClientSign
	}
	return ""
}

func (m *SignInfo) GetCert() string {
	if m != nil {
		return m.Cert
	}
	return ""
}

func init() {
	proto.RegisterEnum("common.ContractName", ContractName_name, ContractName_value)
	proto.RegisterEnum("common.QueryFunction", QueryFunction_name, QueryFunction_value)
	proto.RegisterEnum("common.RuntimeType", RuntimeType_name, RuntimeType_value)
	proto.RegisterEnum("common.ConfigFunction", ConfigFunction_name, ConfigFunction_value)
	proto.RegisterEnum("common.CertManageFunction", CertManageFunction_name, CertManageFunction_value)
	proto.RegisterEnum("common.MultiSignFunction", MultiSignFunction_name, MultiSignFunction_value)
	proto.RegisterEnum("common.ManageUserContractFunction", ManageUserContractFunction_name, ManageUserContractFunction_value)
	proto.RegisterEnum("common.PrivateComputeContractFunction", PrivateComputeContractFunction_name, PrivateComputeContractFunction_value)
	proto.RegisterType((*ContractId)(nil), "common.ContractId")
	proto.RegisterType((*ContractInfo)(nil), "common.ContractInfo")
	proto.RegisterType((*ContractTransaction)(nil), "common.ContractTransaction")
	proto.RegisterType((*PrivateComputeRequest)(nil), "common.PrivateComputeRequest")
	proto.RegisterType((*Payload)(nil), "common.Payload")
	proto.RegisterType((*SignInfo)(nil), "common.SignInfo")
}

func init() { proto.RegisterFile("common/contract.proto", fileDescriptor_a1095c55e7168440) }

var fileDescriptor_a1095c55e7168440 = []byte{
	// 1437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x56, 0x4f, 0x53, 0xdb, 0xce,
	0x19, 0xb6, 0xfc, 0xdf, 0xaf, 0x6d, 0x58, 0x16, 0x48, 0x48, 0x48, 0x1d, 0x4a, 0xda, 0x19, 0xe2,
	0x99, 0xc0, 0x94, 0xcc, 0xf4, 0xda, 0x59, 0xa4, 0xc5, 0x56, 0xb1, 0x25, 0x67, 0xb5, 0x36, 0x90,
	0x43, 0x77, 0x14, 0x5b, 0x31, 0x9e, 0x80, 0xe5, 0xc8, 0x22, 0x0d, 0x87, 0x5e, 0x7b, 0xee, 0xa1,
	0xdf, 0xa4, 0x1f, 0xa0, 0xd7, 0x1e, 0x73, 0xec, 0xb1, 0x43, 0xa6, 0xb7, 0x7e, 0x88, 0xce, 0xae,
	0x24, 0xcb, 0x18, 0xe6, 0x77, 0xc2, 0xfb, 0xbc, 0xcf, 0xfb, 0xbc, 0xcf, 0xbe, 0xfb, 0x6a, 0x17,
	0xd8, 0x1e, 0xfa, 0x37, 0x37, 0xfe, 0xf4, 0x68, 0xe8, 0x4f, 0xc3, 0xc0, 0x1d, 0x86, 0x87, 0xb3,
	0xc0, 0x0f, 0x7d, 0x5c, 0x8c, 0xe0, 0xfd, 0xbf, 0x6b, 0x00, 0x7a, 0x1c, 0x32, 0x47, 0xf8, 0x0d,
	0xd4, 0x13, 0xa2, 0x98, 0xba, 0x37, 0xde, 0x8e, 0xb6, 0xa7, 0x1d, 0x54, 0x58, 0x2d, 0x01, 0x2d,
	0xf7, 0xc6, 0xc3, 0x6f, 0x01, 0x2d, 0x48, 0xdf, 0xbc, 0x60, 0x3e, 0xf1, 0xa7, 0x3b, 0x59, 0xc5,
	0x5b, 0x4f, 0xf0, 0x41, 0x04, 0xe3, 0xdf, 0x43, 0x2d, 0xb8, 0x9d, 0x86, 0x93, 0x1b, 0x4f, 0x84,
	0x77, 0x33, 0x6f, 0x27, 0xb7, 0xa7, 0x1d, 0xac, 0x1d, 0x6f, 0x1e, 0x46, 0xd5, 0x0f, 0x59, 0x14,
	0xe3, 0x77, 0x33, 0x8f, 0x55, 0x83, 0x74, 0xb1, 0xff, 0x27, 0xa8, 0x2d, 0x5c, 0x4d, 0x3f, 0xfb,
	0xd8, 0x82, 0xad, 0x45, 0xc9, 0x30, 0x70, 0xa7, 0x73, 0x77, 0x18, 0xca, 0xb2, 0xda, 0x5e, 0xee,
	0xa0, 0x7a, 0xbc, 0x9b, 0xe8, 0x25, 0x39, 0x3c, 0xa5, 0xb0, 0xcd, 0xe1, 0x63, 0x70, 0x5f, 0xc0,
	0xe6, 0x13, 0x5c, 0xfc, 0x1e, 0xaa, 0x8b, 0x32, 0x93, 0x91, 0xda, 0x7c, 0xf5, 0x18, 0xaf, 0xaa,
	0x9b, 0x23, 0x06, 0xc3, 0xb4, 0x67, 0x9b, 0x50, 0x08, 0xbf, 0x4b, 0x7a, 0xd4, 0x83, 0x7c, 0xf8,
	0xdd, 0x1c, 0xed, 0x7f, 0x85, 0xed, 0x5e, 0x30, 0xf9, 0xe6, 0x86, 0x9e, 0xee, 0xdf, 0xcc, 0x6e,
	0x43, 0x8f, 0x79, 0x5f, 0x6f, 0xbd, 0x79, 0x88, 0xdf, 0x41, 0x65, 0x3e, 0x19, 0x4f, 0xc5, 0xcc,
	0x9d, 0x04, 0xb1, 0x7d, 0x94, 0x14, 0x70, 0x26, 0xe3, 0xa9, 0xdc, 0x2e, 0x2b, 0x4b, 0x4a, 0xcf,
	0x9d, 0x04, 0xf8, 0x2d, 0x94, 0x66, 0xee, 0xdd, 0xb5, 0xef, 0x46, 0xf2, 0xd5, 0xe3, 0xf5, 0x84,
	0xdc, 0x8b, 0x60, 0x96, 0xc4, 0xf7, 0xff, 0xa9, 0x41, 0x29, 0x06, 0xf1, 0x01, 0xa0, 0x59, 0x54,
	0x5e, 0x04, 0xd7, 0x33, 0x31, 0x72, 0x43, 0x37, 0x3e, 0xca, 0xb5, 0x18, 0x67, 0xd7, 0x33, 0xc3,
	0x0d, 0x5d, 0xfc, 0x0c, 0x8a, 0x33, 0x77, 0x3e, 0xff, 0x73, 0x62, 0x3f, 0x5e, 0xe1, 0x17, 0x20,
	0x4d, 0x08, 0xf7, 0x7a, 0xec, 0xab, 0x53, 0xab, 0xb0, 0xd2, 0x7c, 0x32, 0x26, 0xd7, 0x63, 0xff,
	0xf1, 0x90, 0xe4, 0x9f, 0x18, 0x92, 0x5d, 0xa8, 0x0c, 0xfd, 0x91, 0x27, 0xae, 0xdc, 0xf9, 0xd5,
	0x4e, 0x41, 0x11, 0xca, 0x12, 0x68, 0xbb, 0xf3, 0x2b, 0xbc, 0x0d, 0x45, 0x3f, 0x18, 0xcb, 0x9e,
	0x15, 0xf7, 0x72, 0x07, 0x15, 0x56, 0xf0, 0x83, 0xb1, 0x39, 0xda, 0xff, 0x03, 0x94, 0x93, 0x16,
	0xe0, 0xd7, 0x50, 0x1d, 0x5e, 0x4f, 0xbc, 0x69, 0x28, 0x64, 0x2f, 0x62, 0xf3, 0x10, 0x41, 0x92,
	0x84, 0x31, 0xe4, 0x87, 0x5e, 0x10, 0x26, 0x5d, 0x97, 0xbf, 0x9b, 0xff, 0xd3, 0xd2, 0xb9, 0x51,
	0x2e, 0xf6, 0xe0, 0x95, 0x73, 0xe9, 0x70, 0xda, 0x15, 0xba, 0x6d, 0x71, 0x46, 0x74, 0x2e, 0xf4,
	0x36, 0x31, 0x2d, 0xb9, 0x3c, 0x35, 0x5b, 0x28, 0x83, 0x5f, 0xc0, 0xf6, 0x2a, 0xe3, 0x43, 0x9f,
	0xb2, 0x4b, 0xa4, 0xe1, 0xd7, 0xb0, 0xfb, 0x28, 0x99, 0x32, 0x2e, 0xba, 0xc4, 0x22, 0x2d, 0x8a,
	0xb2, 0xb8, 0x01, 0x2f, 0x57, 0x09, 0x2d, 0x7b, 0x40, 0x99, 0x45, 0x2c, 0x9d, 0xa2, 0xdc, 0x53,
	0xf1, 0x6e, 0xbf, 0xc3, 0x4d, 0xe1, 0x98, 0x2d, 0x0b, 0xe5, 0x9f, 0xaa, 0xed, 0x70, 0xc2, 0x29,
	0x2a, 0xe0, 0x37, 0xf0, 0x7a, 0x35, 0xd4, 0x63, 0xe6, 0x80, 0x70, 0x2a, 0x74, 0xbb, 0xdb, 0xeb,
	0x73, 0x8a, 0x8a, 0xcd, 0xfb, 0x1c, 0xd4, 0x3f, 0xdc, 0x7a, 0xc1, 0xdd, 0xe9, 0xed, 0x34, 0x1a,
	0xe0, 0x67, 0x80, 0x5b, 0x94, 0x8b, 0x93, 0x8e, 0xad, 0x9f, 0x89, 0x93, 0x4b, 0xc1, 0x2f, 0x84,
	0x69, 0xa0, 0x0c, 0xde, 0x86, 0x0d, 0x89, 0x2f, 0xb4, 0x4c, 0xeb, 0xd4, 0x46, 0x1a, 0xde, 0x84,
	0x75, 0x09, 0xf3, 0x8b, 0x94, 0x9b, 0xc5, 0xcf, 0x61, 0xf3, 0x81, 0x46, 0x9b, 0x9a, 0xad, 0x36,
	0x47, 0x39, 0x8c, 0x61, 0x4d, 0x89, 0xa8, 0x06, 0x2a, 0x05, 0xb5, 0x05, 0x89, 0x75, 0x88, 0xc3,
	0xe3, 0x9e, 0x46, 0x89, 0xa8, 0x90, 0xd4, 0x4c, 0x75, 0x88, 0xd3, 0x46, 0xc5, 0x44, 0xde, 0xb2,
	0x0d, 0x1a, 0x4b, 0x75, 0x4c, 0x87, 0xa3, 0x12, 0xde, 0x85, 0xe7, 0x32, 0x90, 0x76, 0x70, 0x61,
	0x17, 0x95, 0xf1, 0x6f, 0xe1, 0xd7, 0xa9, 0xd8, 0xb9, 0xc9, 0xdb, 0x82, 0x5f, 0xb0, 0x73, 0x87,
	0x72, 0x67, 0xc9, 0x62, 0x45, 0xb6, 0xed, 0x97, 0x68, 0xd2, 0x01, 0x24, 0xfb, 0x50, 0x9e, 0x23,
	0xb3, 0x55, 0xfc, 0x0a, 0x76, 0x24, 0x76, 0xda, 0xef, 0x74, 0x1e, 0xed, 0xbc, 0x86, 0x7f, 0x05,
	0x2f, 0x52, 0xd9, 0x08, 0x4d, 0x3b, 0x56, 0x4f, 0x92, 0x57, 0xc3, 0xaa, 0xdc, 0x9a, 0x9c, 0x82,
	0xe5, 0x28, 0x31, 0x28, 0x5b, 0x12, 0x5f, 0x4f, 0xc4, 0x09, 0xd3, 0xdb, 0xe6, 0x80, 0x1a, 0x0f,
	0x64, 0x10, 0x6a, 0xfa, 0x50, 0x5d, 0xba, 0x26, 0x71, 0x15, 0x4a, 0xa6, 0x35, 0x20, 0x1d, 0x75,
	0xac, 0x00, 0x45, 0x8b, 0x70, 0x73, 0x40, 0x91, 0x26, 0x7f, 0x9f, 0x13, 0xa7, 0x4b, 0x19, 0xca,
	0xe2, 0x32, 0xe4, 0xcf, 0x2f, 0x06, 0x5d, 0x94, 0x93, 0xbf, 0x5a, 0xc4, 0xe9, 0xa2, 0x3c, 0x2e,
	0x41, 0x8e, 0x0e, 0xba, 0xa8, 0x80, 0xeb, 0x50, 0x31, 0x6c, 0xfd, 0x8c, 0x32, 0xd1, 0xb2, 0x51,
	0x11, 0xaf, 0x43, 0x35, 0x5e, 0xfe, 0x91, 0x0c, 0x08, 0x2a, 0x35, 0xff, 0x9b, 0x83, 0x35, 0xdd,
	0x9f, 0x7e, 0x9e, 0x8c, 0x17, 0x63, 0xb5, 0x05, 0x28, 0x3d, 0xf9, 0xc5, 0xa7, 0x13, 0x9f, 0xe4,
	0x32, 0x2a, 0x08, 0x47, 0x9a, 0x94, 0xd4, 0x6d, 0x46, 0x45, 0xbf, 0x67, 0xc8, 0x69, 0xce, 0x62,
	0x04, 0xb5, 0x68, 0x57, 0x31, 0xa2, 0x66, 0x89, 0xb3, 0xbe, 0xc3, 0x05, 0xb3, 0x6d, 0x2e, 0x88,
	0x61, 0xa0, 0xbc, 0x1c, 0x98, 0x25, 0x2c, 0xa6, 0x16, 0x56, 0x60, 0x83, 0x76, 0xa8, 0x1c, 0x7e,
	0xbc, 0x01, 0x75, 0x35, 0x43, 0xc4, 0x30, 0x98, 0x12, 0x28, 0x49, 0x9b, 0x29, 0x14, 0xe7, 0x97,
	0x1f, 0xa2, 0x71, 0x7a, 0x45, 0x5a, 0x52, 0xa8, 0xcd, 0x5a, 0x2a, 0x1b, 0xe4, 0xc7, 0xb0, 0x40,
	0xe2, 0xe4, 0xea, 0x03, 0x30, 0xce, 0xad, 0x49, 0x47, 0xba, 0x6d, 0x39, 0xd4, 0x72, 0xfa, 0x8e,
	0xa0, 0x17, 0x91, 0xff, 0x3a, 0xde, 0x81, 0xad, 0x87, 0x70, 0xac, 0xb2, 0xf6, 0x38, 0x12, 0x4b,
	0xad, 0xcb, 0x3e, 0xf4, 0x28, 0xeb, 0x9a, 0x8e, 0x63, 0xda, 0x96, 0xd2, 0x41, 0x52, 0x7e, 0x09,
	0x8b, 0x45, 0x36, 0x56, 0xe0, 0x58, 0x01, 0xcb, 0x66, 0x2b, 0x87, 0xa6, 0xa1, 0xd2, 0x37, 0xa5,
	0x64, 0x02, 0xc4, 0xb9, 0x5b, 0xcb, 0x58, 0x9c, 0xb8, 0xdd, 0xfc, 0x0b, 0x60, 0xdd, 0x0b, 0xc2,
	0xae, 0x3b, 0x75, 0xc7, 0xde, 0xe2, 0xa8, 0x6b, 0x50, 0x56, 0x97, 0x9c, 0xd4, 0xca, 0xc8, 0x2e,
	0xc9, 0x95, 0x93, 0x64, 0x45, 0x67, 0xab, 0x90, 0xe8, 0x96, 0xcc, 0xa6, 0x94, 0x53, 0x46, 0xe9,
	0xc7, 0xf8, 0x6c, 0x23, 0xa4, 0x6f, 0xc5, 0x58, 0x3e, 0x65, 0x31, 0x3a, 0xb0, 0xcf, 0x28, 0x2a,
	0x34, 0x7f, 0x07, 0x1b, 0xdd, 0xdb, 0xeb, 0x70, 0x22, 0x2f, 0xf3, 0x45, 0xf5, 0x12, 0xe4, 0x18,
	0xfd, 0x80, 0x32, 0x72, 0x6e, 0x07, 0xb6, 0x2a, 0x58, 0x81, 0x42, 0x5c, 0xaa, 0xf9, 0x57, 0x0d,
	0x5e, 0x46, 0x76, 0xfb, 0x73, 0x2f, 0x48, 0x2e, 0xfa, 0x45, 0xf2, 0x06, 0xd4, 0x4d, 0xcb, 0x4c,
	0x6f, 0x39, 0x94, 0x91, 0x67, 0xdf, 0xef, 0xb5, 0x18, 0x31, 0x96, 0x2e, 0x13, 0x75, 0xed, 0x45,
	0xc6, 0x52, 0x30, 0x2b, 0xdb, 0x9b, 0xf8, 0x4d, 0xe1, 0x9c, 0xe4, 0x46, 0x96, 0x53, 0x30, 0xdf,
	0xfc, 0x47, 0x0e, 0x1a, 0x0f, 0x9f, 0xf7, 0x47, 0x66, 0x10, 0xd4, 0x96, 0x6f, 0x5c, 0x94, 0x91,
	0x9d, 0x95, 0x88, 0x41, 0x38, 0x41, 0x9a, 0x8c, 0x3b, 0x64, 0x40, 0x85, 0x4e, 0xd4, 0xa3, 0x82,
	0xb2, 0x32, 0xae, 0x10, 0xc3, 0x64, 0x28, 0x27, 0xbf, 0xd2, 0x68, 0x25, 0xe9, 0x79, 0xb9, 0xb7,
	0x88, 0x9e, 0xe8, 0x15, 0xe4, 0xe7, 0xa7, 0x20, 0x6a, 0xe9, 0x1d, 0xf9, 0x97, 0xd1, 0x9e, 0xcd,
	0x38, 0x2a, 0x26, 0x17, 0x6f, 0x82, 0xf7, 0x98, 0x6d, 0x9f, 0xa2, 0x92, 0x3c, 0x39, 0xe5, 0x28,
	0x2e, 0x58, 0x96, 0x57, 0x89, 0x32, 0x64, 0x32, 0x54, 0x91, 0xfb, 0x8c, 0xa6, 0x25, 0x2d, 0x01,
	0xf8, 0x25, 0x3c, 0xd3, 0xdb, 0x54, 0x3f, 0x13, 0x3a, 0xe9, 0x74, 0x28, 0x8b, 0x9e, 0x3f, 0xd2,
	0xe7, 0x6d, 0x54, 0x95, 0xaf, 0xe3, 0x72, 0x15, 0x6a, 0xe9, 0xec, 0xb2, 0xc7, 0x45, 0xaf, 0x7f,
	0x22, 0xce, 0xe8, 0x25, 0xaa, 0xe1, 0xdf, 0xc0, 0xde, 0x32, 0x61, 0x40, 0x99, 0x79, 0x6a, 0xea,
	0x84, 0xcb, 0xe9, 0x4d, 0x58, 0xf5, 0xe4, 0xc5, 0x5a, 0xd9, 0xc4, 0x5a, 0xf2, 0xb0, 0x24, 0xb8,
	0xde, 0x96, 0x0e, 0xac, 0x96, 0xfc, 0x66, 0x56, 0x42, 0xf2, 0x31, 0x25, 0xbc, 0xcf, 0x28, 0x42,
	0xf2, 0x0d, 0x71, 0x22, 0x99, 0xae, 0xcd, 0xa9, 0x20, 0x9c, 0x53, 0xf9, 0xa2, 0x9a, 0xb6, 0x85,
	0x36, 0x4e, 0x3e, 0xff, 0xeb, 0xbe, 0xa1, 0xfd, 0xb8, 0x6f, 0x68, 0xff, 0xb9, 0x6f, 0x68, 0x7f,
	0xfb, 0xd9, 0xc8, 0xfc, 0xf8, 0xd9, 0xc8, 0xfc, 0xfb, 0x67, 0x23, 0x03, 0x3b, 0x7e, 0x30, 0x3e,
	0x1c, 0x5e, 0xb9, 0x93, 0xe9, 0x8d, 0xfb, 0xc5, 0x0b, 0x0e, 0x67, 0x9f, 0xe2, 0xff, 0xb2, 0x3e,
	0x1e, 0x2f, 0xa1, 0x7e, 0x30, 0x3e, 0x4a, 0x97, 0xef, 0xe6, 0xa3, 0x2f, 0xef, 0xc6, 0xfe, 0xd1,
	0xec, 0xd3, 0x91, 0xfa, 0x97, 0x7a, 0xec, 0x1f, 0x45, 0x39, 0x9f, 0x8a, 0x6a, 0xfd, 0xfe, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x1b, 0x3a, 0x15, 0x73, 0x7b, 0x0b, 0x00, 0x00,
}

func (m *ContractId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RuntimeType != 0 {
		i = encodeVarintContract(dAtA, i, uint64(m.RuntimeType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ContractVersion) > 0 {
		i -= len(m.ContractVersion)
		copy(dAtA[i:], m.ContractVersion)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractVersion)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ContractInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractTransaction) > 0 {
		for iNdEx := len(m.ContractTransaction) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContractTransaction[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContractTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContractTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContractTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintContract(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0x12
	}
	if m.ContractId != nil {
		{
			size, err := m.ContractId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrivateComputeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateComputeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateComputeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SignPair) > 0 {
		for iNdEx := len(m.SignPair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SignPair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintContract(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Payload) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Payload) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Payload) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrgId) > 0 {
		for iNdEx := len(m.OrgId) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrgId[iNdEx])
			copy(dAtA[i:], m.OrgId[iNdEx])
			i = encodeVarintContract(dAtA, i, uint64(len(m.OrgId[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintContract(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SigAlgo) > 0 {
		i -= len(m.SigAlgo)
		copy(dAtA[i:], m.SigAlgo)
		i = encodeVarintContract(dAtA, i, uint64(len(m.SigAlgo)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Passwd) > 0 {
		i -= len(m.Passwd)
		copy(dAtA[i:], m.Passwd)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Passwd)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PrivateRlpData) > 0 {
		i -= len(m.PrivateRlpData)
		copy(dAtA[i:], m.PrivateRlpData)
		i = encodeVarintContract(dAtA, i, uint64(len(m.PrivateRlpData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SignInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SignInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SignInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cert) > 0 {
		i -= len(m.Cert)
		copy(dAtA[i:], m.Cert)
		i = encodeVarintContract(dAtA, i, uint64(len(m.Cert)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ClientSign) > 0 {
		i -= len(m.ClientSign)
		copy(dAtA[i:], m.ClientSign)
		i = encodeVarintContract(dAtA, i, uint64(len(m.ClientSign)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ContractId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ContractVersion)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if m.RuntimeType != 0 {
		n += 1 + sovContract(uint64(m.RuntimeType))
	}
	return n
}

func (m *ContractInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ContractTransaction) > 0 {
		for _, e := range m.ContractTransaction {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	return n
}

func (m *ContractTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ContractId != nil {
		l = m.ContractId.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *PrivateComputeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SignPair) > 0 {
		for _, e := range m.SignPair {
			l = e.Size()
			n += 1 + l + sovContract(uint64(l))
		}
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func (m *Payload) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PrivateRlpData)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.SigAlgo)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	if len(m.OrgId) > 0 {
		for _, s := range m.OrgId {
			l = len(s)
			n += 1 + l + sovContract(uint64(l))
		}
	}
	return n
}

func (m *SignInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ClientSign)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	l = len(m.Cert)
	if l > 0 {
		n += 1 + l + sovContract(uint64(l))
	}
	return n
}

func sovContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozContract(x uint64) (n int) {
	return sovContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ContractId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RuntimeType", wireType)
			}
			m.RuntimeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RuntimeType |= RuntimeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractTransaction = append(m.ContractTransaction, &ContractTransaction{})
			if err := m.ContractTransaction[len(m.ContractTransaction)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContractTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContractTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContractTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContractId == nil {
				m.ContractId = &ContractId{}
			}
			if err := m.ContractId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateComputeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateComputeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateComputeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPair = append(m.SignPair, &SignInfo{})
			if err := m.SignPair[len(m.SignPair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &Payload{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Payload) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Payload: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Payload: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivateRlpData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrivateRlpData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAlgo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigAlgo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgId = append(m.OrgId, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SignInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SignInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SignInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientSign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cert", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cert = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupContract = fmt.Errorf("proto: unexpected end of group")
)
