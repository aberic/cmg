// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common/rwset.proto

package common

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// key read version
type KeyVersion struct {
	// the transaction identifier that last modified the key
	RefTxId string `protobuf:"bytes,3,opt,name=ref_tx_id,json=refTxId,proto3" json:"ref_tx_id,omitempty"`
	// the offset of the key in the write set of the transaction, starts from 0
	RefOffset int32 `protobuf:"varint,4,opt,name=ref_offset,json=refOffset,proto3" json:"ref_offset,omitempty"`
}

func (m *KeyVersion) Reset()         { *m = KeyVersion{} }
func (m *KeyVersion) String() string { return proto.CompactTextString(m) }
func (*KeyVersion) ProtoMessage()    {}
func (*KeyVersion) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b37461e5519cef2, []int{0}
}
func (m *KeyVersion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyVersion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyVersion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyVersion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyVersion.Merge(m, src)
}
func (m *KeyVersion) XXX_Size() int {
	return m.Size()
}
func (m *KeyVersion) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyVersion.DiscardUnknown(m)
}

var xxx_messageInfo_KeyVersion proto.InternalMessageInfo

func (m *KeyVersion) GetRefTxId() string {
	if m != nil {
		return m.RefTxId
	}
	return ""
}

func (m *KeyVersion) GetRefOffset() int32 {
	if m != nil {
		return m.RefOffset
	}
	return 0
}

// TxRead describes a read operation on a key
type TxRead struct {
	// read key
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// the value of the key
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// contract name, used in cross-contract calls
	// set to null if only the contract in transaction request is called
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// read key version
	Version *KeyVersion `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *TxRead) Reset()         { *m = TxRead{} }
func (m *TxRead) String() string { return proto.CompactTextString(m) }
func (*TxRead) ProtoMessage()    {}
func (*TxRead) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b37461e5519cef2, []int{1}
}
func (m *TxRead) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRead) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRead.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRead) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRead.Merge(m, src)
}
func (m *TxRead) XXX_Size() int {
	return m.Size()
}
func (m *TxRead) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRead.DiscardUnknown(m)
}

var xxx_messageInfo_TxRead proto.InternalMessageInfo

func (m *TxRead) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TxRead) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TxRead) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

func (m *TxRead) GetVersion() *KeyVersion {
	if m != nil {
		return m.Version
	}
	return nil
}

// TxRead describes a write/delete operation on a key
type TxWrite struct {
	// write key
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// write value
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// contract name, used in cross-contract calls
	// set to null if only the contract in transaction request is called
	ContractName string `protobuf:"bytes,3,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
}

func (m *TxWrite) Reset()         { *m = TxWrite{} }
func (m *TxWrite) String() string { return proto.CompactTextString(m) }
func (*TxWrite) ProtoMessage()    {}
func (*TxWrite) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b37461e5519cef2, []int{2}
}
func (m *TxWrite) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxWrite) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxWrite.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxWrite) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxWrite.Merge(m, src)
}
func (m *TxWrite) XXX_Size() int {
	return m.Size()
}
func (m *TxWrite) XXX_DiscardUnknown() {
	xxx_messageInfo_TxWrite.DiscardUnknown(m)
}

var xxx_messageInfo_TxWrite proto.InternalMessageInfo

func (m *TxWrite) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *TxWrite) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *TxWrite) GetContractName() string {
	if m != nil {
		return m.ContractName
	}
	return ""
}

// TxRWSet describes all the operations of a transaction on ledger
type TxRWSet struct {
	// transaction identifier
	TxId string `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// read set
	TxReads []*TxRead `protobuf:"bytes,2,rep,name=tx_reads,json=txReads,proto3" json:"tx_reads,omitempty"`
	// write set
	TxWrites []*TxWrite `protobuf:"bytes,3,rep,name=tx_writes,json=txWrites,proto3" json:"tx_writes,omitempty"`
}

func (m *TxRWSet) Reset()         { *m = TxRWSet{} }
func (m *TxRWSet) String() string { return proto.CompactTextString(m) }
func (*TxRWSet) ProtoMessage()    {}
func (*TxRWSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_3b37461e5519cef2, []int{3}
}
func (m *TxRWSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxRWSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxRWSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxRWSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRWSet.Merge(m, src)
}
func (m *TxRWSet) XXX_Size() int {
	return m.Size()
}
func (m *TxRWSet) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRWSet.DiscardUnknown(m)
}

var xxx_messageInfo_TxRWSet proto.InternalMessageInfo

func (m *TxRWSet) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *TxRWSet) GetTxReads() []*TxRead {
	if m != nil {
		return m.TxReads
	}
	return nil
}

func (m *TxRWSet) GetTxWrites() []*TxWrite {
	if m != nil {
		return m.TxWrites
	}
	return nil
}

func init() {
	proto.RegisterType((*KeyVersion)(nil), "common.KeyVersion")
	proto.RegisterType((*TxRead)(nil), "common.TxRead")
	proto.RegisterType((*TxWrite)(nil), "common.TxWrite")
	proto.RegisterType((*TxRWSet)(nil), "common.TxRWSet")
}

func init() { proto.RegisterFile("common/rwset.proto", fileDescriptor_3b37461e5519cef2) }

var fileDescriptor_3b37461e5519cef2 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0x87, 0x1d, 0xa3, 0x46, 0x8f, 0xde, 0x3f, 0xcc, 0xbd, 0x8b, 0x70, 0xe1, 0x86, 0x90, 0xbb,
	0xc9, 0x05, 0x9b, 0x80, 0x7d, 0x83, 0x6e, 0x4a, 0x29, 0xb4, 0x30, 0x15, 0x85, 0x6e, 0xc2, 0x24,
	0x99, 0xa4, 0xc1, 0x26, 0x23, 0x93, 0xa9, 0xc6, 0x75, 0x5f, 0xa0, 0x8f, 0xd5, 0xa5, 0xcb, 0x2e,
	0x8b, 0xbe, 0x48, 0xc9, 0x8c, 0x62, 0x1f, 0xa0, 0xab, 0x9c, 0xf3, 0xcb, 0xc7, 0x39, 0x1f, 0x87,
	0x01, 0x1c, 0xf3, 0xa2, 0xe0, 0x65, 0x20, 0xd6, 0x15, 0x93, 0xfe, 0x52, 0x70, 0xc9, 0x71, 0x4f,
	0x67, 0xee, 0x25, 0xc0, 0x35, 0xdb, 0xcc, 0x98, 0xa8, 0x72, 0x5e, 0xe2, 0x3f, 0x30, 0x10, 0x2c,
	0x0d, 0x65, 0x1d, 0xe6, 0x89, 0x65, 0x38, 0xc8, 0x1b, 0x10, 0x53, 0xb0, 0x74, 0x5a, 0x5f, 0x25,
	0xf8, 0x2f, 0x40, 0xf3, 0x8f, 0xa7, 0x69, 0xc5, 0xa4, 0xd5, 0x71, 0x90, 0xd7, 0x25, 0x0d, 0x7d,
	0xab, 0x02, 0xf7, 0x19, 0x41, 0x6f, 0x5a, 0x13, 0x46, 0x13, 0xfc, 0x13, 0x8c, 0x05, 0xdb, 0x58,
	0xc8, 0x41, 0xde, 0x88, 0x34, 0x25, 0xfe, 0x0d, 0xdd, 0x15, 0x7d, 0x7c, 0x62, 0x56, 0x5b, 0x65,
	0xba, 0xc1, 0xff, 0xe0, 0x5b, 0xcc, 0x4b, 0x29, 0x68, 0x2c, 0xc3, 0x92, 0x16, 0xec, 0xb0, 0x71,
	0x74, 0x0c, 0x6f, 0x68, 0xc1, 0xf0, 0x18, 0xcc, 0x95, 0xb6, 0x53, 0x3b, 0x87, 0x13, 0xec, 0x6b,
	0x75, 0xff, 0xe4, 0x4d, 0x8e, 0x88, 0x3b, 0x03, 0x73, 0x5a, 0xcf, 0x45, 0x2e, 0xd9, 0x97, 0x5a,
	0xb8, 0xeb, 0x66, 0x2e, 0x99, 0xdf, 0x31, 0x89, 0x7f, 0x41, 0x57, 0xdf, 0x07, 0x29, 0xae, 0x23,
	0x9b, 0xe3, 0xfc, 0x87, 0xbe, 0xac, 0x43, 0xc1, 0x68, 0x52, 0x59, 0x6d, 0xc7, 0xf0, 0x86, 0x93,
	0xef, 0x47, 0x4d, 0x7d, 0x14, 0x62, 0x4a, 0xf5, 0xad, 0xf0, 0x18, 0x06, 0xb2, 0x0e, 0xd7, 0x8d,
	0x63, 0x65, 0x19, 0x8a, 0xfd, 0x71, 0x62, 0x95, 0x3b, 0xe9, 0x4b, 0x5d, 0x54, 0x17, 0xd1, 0xeb,
	0xce, 0x46, 0xdb, 0x9d, 0x8d, 0xde, 0x77, 0x36, 0x7a, 0xd9, 0xdb, 0xad, 0xed, 0xde, 0x6e, 0xbd,
	0xed, 0xed, 0x16, 0x58, 0x5c, 0x64, 0x7e, 0xfc, 0x40, 0xf3, 0xb2, 0xa0, 0x0b, 0x26, 0xfc, 0x65,
	0x74, 0x98, 0x72, 0xff, 0x39, 0xe5, 0x22, 0x0b, 0x4e, 0xed, 0x59, 0xc6, 0x83, 0x65, 0x14, 0xa8,
	0x27, 0x90, 0xf1, 0x40, 0xf3, 0x51, 0x4f, 0xf5, 0xe7, 0x1f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b,
	0xc2, 0x38, 0x11, 0x28, 0x02, 0x00, 0x00,
}

func (m *KeyVersion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyVersion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyVersion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RefOffset != 0 {
		i = encodeVarintRwset(dAtA, i, uint64(m.RefOffset))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefTxId) > 0 {
		i -= len(m.RefTxId)
		copy(dAtA[i:], m.RefTxId)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.RefTxId)))
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func (m *TxRead) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRead) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRead) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != nil {
		{
			size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRwset(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxWrite) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxWrite) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxWrite) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ContractName) > 0 {
		i -= len(m.ContractName)
		copy(dAtA[i:], m.ContractName)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.ContractName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxRWSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxRWSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxRWSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxWrites) > 0 {
		for iNdEx := len(m.TxWrites) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxWrites[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRwset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TxReads) > 0 {
		for iNdEx := len(m.TxReads) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxReads[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRwset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintRwset(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRwset(dAtA []byte, offset int, v uint64) int {
	offset -= sovRwset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyVersion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RefTxId)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	if m.RefOffset != 0 {
		n += 1 + sovRwset(uint64(m.RefOffset))
	}
	return n
}

func (m *TxRead) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	if m.Version != nil {
		l = m.Version.Size()
		n += 1 + l + sovRwset(uint64(l))
	}
	return n
}

func (m *TxWrite) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	l = len(m.ContractName)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	return n
}

func (m *TxRWSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovRwset(uint64(l))
	}
	if len(m.TxReads) > 0 {
		for _, e := range m.TxReads {
			l = e.Size()
			n += 1 + l + sovRwset(uint64(l))
		}
	}
	if len(m.TxWrites) > 0 {
		for _, e := range m.TxWrites {
			l = e.Size()
			n += 1 + l + sovRwset(uint64(l))
		}
	}
	return n
}

func sovRwset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRwset(x uint64) (n int) {
	return sovRwset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyVersion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRwset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyVersion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyVersion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefTxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefTxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefOffset", wireType)
			}
			m.RefOffset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefOffset |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRwset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRwset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRead) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRwset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRead: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRead: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Version == nil {
				m.Version = &KeyVersion{}
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRwset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRwset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxWrite) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRwset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxWrite: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxWrite: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContractName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRwset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRwset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxRWSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRwset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxRWSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxRWSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxReads", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxReads = append(m.TxReads, &TxRead{})
			if err := m.TxReads[len(m.TxReads)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxWrites", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRwset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRwset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxWrites = append(m.TxWrites, &TxWrite{})
			if err := m.TxWrites[len(m.TxWrites)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRwset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRwset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRwset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRwset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRwset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRwset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRwset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRwset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRwset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRwset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRwset = fmt.Errorf("proto: unexpected end of group")
)
