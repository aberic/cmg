// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: consensus/consensus.proto

package consensus

import (
	common "chainmaker.org/chainmaker-sdk-go/pb/protogo/common"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ConsensusType int32

const (
	ConsensusType_SOLO     ConsensusType = 0
	ConsensusType_TBFT     ConsensusType = 1
	ConsensusType_MBFT     ConsensusType = 2
	ConsensusType_HOTSTUFF ConsensusType = 3
	ConsensusType_RAFT     ConsensusType = 4
	ConsensusType_POW      ConsensusType = 10
)

var ConsensusType_name = map[int32]string{
	0:  "SOLO",
	1:  "TBFT",
	2:  "MBFT",
	3:  "HOTSTUFF",
	4:  "RAFT",
	10: "POW",
}

var ConsensusType_value = map[string]int32{
	"SOLO":     0,
	"TBFT":     1,
	"MBFT":     2,
	"HOTSTUFF": 3,
	"RAFT":     4,
	"POW":      10,
}

func (x ConsensusType) String() string {
	return proto.EnumName(ConsensusType_name, int32(x))
}

func (ConsensusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{0}
}

type VerifyResult_Code int32

const (
	VerifyResult_SUCCESS VerifyResult_Code = 0
	VerifyResult_FAIL    VerifyResult_Code = 1
)

var VerifyResult_Code_name = map[int32]string{
	0: "SUCCESS",
	1: "FAIL",
}

var VerifyResult_Code_value = map[string]int32{
	"SUCCESS": 0,
	"FAIL":    1,
}

func (x VerifyResult_Code) String() string {
	return proto.EnumName(VerifyResult_Code_name, int32(x))
}

func (VerifyResult_Code) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{0, 0}
}

type VerifyResult struct {
	VerifiedBlock *common.Block     `protobuf:"bytes,1,opt,name=verified_block,json=verifiedBlock,proto3" json:"verified_block,omitempty"`
	Code          VerifyResult_Code `protobuf:"varint,2,opt,name=code,proto3,enum=consensus.VerifyResult_Code" json:"code,omitempty"`
	Msg           string            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *VerifyResult) Reset()         { *m = VerifyResult{} }
func (m *VerifyResult) String() string { return proto.CompactTextString(m) }
func (*VerifyResult) ProtoMessage()    {}
func (*VerifyResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{0}
}
func (m *VerifyResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyResult.Merge(m, src)
}
func (m *VerifyResult) XXX_Size() int {
	return m.Size()
}
func (m *VerifyResult) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyResult.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyResult proto.InternalMessageInfo

func (m *VerifyResult) GetVerifiedBlock() *common.Block {
	if m != nil {
		return m.VerifiedBlock
	}
	return nil
}

func (m *VerifyResult) GetCode() VerifyResult_Code {
	if m != nil {
		return m.Code
	}
	return VerifyResult_SUCCESS
}

func (m *VerifyResult) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type BlockHeaderConsensusArgs struct {
	ConsensusType int64 `protobuf:"varint,1,opt,name=ConsensusType,proto3" json:"ConsensusType,omitempty"`
	// bytes ConsensusData = 2;
	Round         uint64          `protobuf:"varint,3,opt,name=Round,proto3" json:"Round,omitempty"`
	Level         uint64          `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	ConsensusData *common.TxRWSet `protobuf:"bytes,5,opt,name=ConsensusData,proto3" json:"ConsensusData,omitempty"`
}

func (m *BlockHeaderConsensusArgs) Reset()         { *m = BlockHeaderConsensusArgs{} }
func (m *BlockHeaderConsensusArgs) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderConsensusArgs) ProtoMessage()    {}
func (*BlockHeaderConsensusArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{1}
}
func (m *BlockHeaderConsensusArgs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderConsensusArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderConsensusArgs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderConsensusArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderConsensusArgs.Merge(m, src)
}
func (m *BlockHeaderConsensusArgs) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderConsensusArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderConsensusArgs.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderConsensusArgs proto.InternalMessageInfo

func (m *BlockHeaderConsensusArgs) GetConsensusType() int64 {
	if m != nil {
		return m.ConsensusType
	}
	return 0
}

func (m *BlockHeaderConsensusArgs) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *BlockHeaderConsensusArgs) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *BlockHeaderConsensusArgs) GetConsensusData() *common.TxRWSet {
	if m != nil {
		return m.ConsensusData
	}
	return nil
}

type GovernmentMember struct {
	NodeID string `protobuf:"bytes,1,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
	Index  int64  `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
}

func (m *GovernmentMember) Reset()         { *m = GovernmentMember{} }
func (m *GovernmentMember) String() string { return proto.CompactTextString(m) }
func (*GovernmentMember) ProtoMessage()    {}
func (*GovernmentMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{2}
}
func (m *GovernmentMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernmentMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovernmentMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovernmentMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernmentMember.Merge(m, src)
}
func (m *GovernmentMember) XXX_Size() int {
	return m.Size()
}
func (m *GovernmentMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernmentMember.DiscardUnknown(m)
}

var xxx_messageInfo_GovernmentMember proto.InternalMessageInfo

func (m *GovernmentMember) GetNodeID() string {
	if m != nil {
		return m.NodeID
	}
	return ""
}

func (m *GovernmentMember) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type GovernmentContract struct {
	EpochId           uint64        `protobuf:"varint,1,opt,name=EpochId,proto3" json:"EpochId,omitempty"`
	Type              ConsensusType `protobuf:"varint,2,opt,name=Type,proto3,enum=consensus.ConsensusType" json:"Type,omitempty"`
	CurMaxIndex       int64         `protobuf:"varint,3,opt,name=CurMaxIndex,proto3" json:"CurMaxIndex,omitempty"`
	SkipTimeoutCommit bool          `protobuf:"varint,4,opt,name=SkipTimeoutCommit,proto3" json:"SkipTimeoutCommit,omitempty"`
	//bool IsConfigChg = 4;   //is the configuration changed
	//bool IsValidatorChg = 5;    //is the validator changed
	ConfigSequence   uint64              `protobuf:"varint,6,opt,name=ConfigSequence,proto3" json:"ConfigSequence,omitempty"`
	N                uint64              `protobuf:"varint,7,opt,name=N,proto3" json:"N,omitempty"`
	MinQuorumForQc   uint64              `protobuf:"varint,8,opt,name=MinQuorumForQc,proto3" json:"MinQuorumForQc,omitempty"`
	CachedLen        uint64              `protobuf:"varint,9,opt,name=CachedLen,proto3" json:"CachedLen,omitempty"`
	NextSwitchHeight uint64              `protobuf:"varint,10,opt,name=NextSwitchHeight,proto3" json:"NextSwitchHeight,omitempty"`
	TransitBlock     uint64              `protobuf:"varint,11,opt,name=TransitBlock,proto3" json:"TransitBlock,omitempty"`
	BlockNumPerEpoch uint64              `protobuf:"varint,12,opt,name=BlockNumPerEpoch,proto3" json:"BlockNumPerEpoch,omitempty"`
	ValidatorNum     uint64              `protobuf:"varint,13,opt,name=ValidatorNum,proto3" json:"ValidatorNum,omitempty"`
	NodeProposeRound uint64              `protobuf:"varint,14,opt,name=NodeProposeRound,proto3" json:"NodeProposeRound,omitempty"`
	Members          []*GovernmentMember `protobuf:"bytes,15,rep,name=Members,proto3" json:"Members,omitempty"`
	Validators       []*GovernmentMember `protobuf:"bytes,16,rep,name=Validators,proto3" json:"Validators,omitempty"`
	NextValidators   []*GovernmentMember `protobuf:"bytes,17,rep,name=NextValidators,proto3" json:"NextValidators,omitempty"`
}

func (m *GovernmentContract) Reset()         { *m = GovernmentContract{} }
func (m *GovernmentContract) String() string { return proto.CompactTextString(m) }
func (*GovernmentContract) ProtoMessage()    {}
func (*GovernmentContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_477fc6492de41e15, []int{3}
}
func (m *GovernmentContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GovernmentContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GovernmentContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GovernmentContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GovernmentContract.Merge(m, src)
}
func (m *GovernmentContract) XXX_Size() int {
	return m.Size()
}
func (m *GovernmentContract) XXX_DiscardUnknown() {
	xxx_messageInfo_GovernmentContract.DiscardUnknown(m)
}

var xxx_messageInfo_GovernmentContract proto.InternalMessageInfo

func (m *GovernmentContract) GetEpochId() uint64 {
	if m != nil {
		return m.EpochId
	}
	return 0
}

func (m *GovernmentContract) GetType() ConsensusType {
	if m != nil {
		return m.Type
	}
	return ConsensusType_SOLO
}

func (m *GovernmentContract) GetCurMaxIndex() int64 {
	if m != nil {
		return m.CurMaxIndex
	}
	return 0
}

func (m *GovernmentContract) GetSkipTimeoutCommit() bool {
	if m != nil {
		return m.SkipTimeoutCommit
	}
	return false
}

func (m *GovernmentContract) GetConfigSequence() uint64 {
	if m != nil {
		return m.ConfigSequence
	}
	return 0
}

func (m *GovernmentContract) GetN() uint64 {
	if m != nil {
		return m.N
	}
	return 0
}

func (m *GovernmentContract) GetMinQuorumForQc() uint64 {
	if m != nil {
		return m.MinQuorumForQc
	}
	return 0
}

func (m *GovernmentContract) GetCachedLen() uint64 {
	if m != nil {
		return m.CachedLen
	}
	return 0
}

func (m *GovernmentContract) GetNextSwitchHeight() uint64 {
	if m != nil {
		return m.NextSwitchHeight
	}
	return 0
}

func (m *GovernmentContract) GetTransitBlock() uint64 {
	if m != nil {
		return m.TransitBlock
	}
	return 0
}

func (m *GovernmentContract) GetBlockNumPerEpoch() uint64 {
	if m != nil {
		return m.BlockNumPerEpoch
	}
	return 0
}

func (m *GovernmentContract) GetValidatorNum() uint64 {
	if m != nil {
		return m.ValidatorNum
	}
	return 0
}

func (m *GovernmentContract) GetNodeProposeRound() uint64 {
	if m != nil {
		return m.NodeProposeRound
	}
	return 0
}

func (m *GovernmentContract) GetMembers() []*GovernmentMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GovernmentContract) GetValidators() []*GovernmentMember {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *GovernmentContract) GetNextValidators() []*GovernmentMember {
	if m != nil {
		return m.NextValidators
	}
	return nil
}

func init() {
	proto.RegisterEnum("consensus.ConsensusType", ConsensusType_name, ConsensusType_value)
	proto.RegisterEnum("consensus.VerifyResult_Code", VerifyResult_Code_name, VerifyResult_Code_value)
	proto.RegisterType((*VerifyResult)(nil), "consensus.VerifyResult")
	proto.RegisterType((*BlockHeaderConsensusArgs)(nil), "consensus.BlockHeaderConsensusArgs")
	proto.RegisterType((*GovernmentMember)(nil), "consensus.GovernmentMember")
	proto.RegisterType((*GovernmentContract)(nil), "consensus.GovernmentContract")
}

func init() { proto.RegisterFile("consensus/consensus.proto", fileDescriptor_477fc6492de41e15) }

var fileDescriptor_477fc6492de41e15 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x94, 0x4d, 0x4f, 0xf3, 0x46,
	0x10, 0xc7, 0xe3, 0xc7, 0x86, 0x24, 0x93, 0x97, 0xc7, 0xcf, 0xaa, 0xaa, 0xb6, 0x2d, 0x8d, 0xa2,
	0xa8, 0xaa, 0x22, 0x04, 0x49, 0x45, 0xcb, 0xa9, 0x97, 0x82, 0x21, 0x25, 0x52, 0x5e, 0x60, 0x6d,
	0x40, 0xea, 0xa5, 0x72, 0xec, 0x21, 0xb1, 0x12, 0x7b, 0xd3, 0xb5, 0x0d, 0xe1, 0x5b, 0xf4, 0x3b,
	0xf4, 0xd0, 0x53, 0xbf, 0x47, 0x8f, 0x1c, 0x7b, 0xac, 0xe0, 0x8b, 0x3c, 0xf2, 0x9a, 0x24, 0x4e,
	0x38, 0x70, 0x9b, 0xf9, 0xed, 0x7f, 0xfe, 0x33, 0x99, 0xec, 0x1a, 0xbe, 0x72, 0x78, 0x10, 0x62,
	0x10, 0xc6, 0x61, 0x7b, 0x15, 0xb5, 0xe6, 0x82, 0x47, 0x9c, 0x14, 0x57, 0xe0, 0x6b, 0xe2, 0x70,
	0xdf, 0xe7, 0x41, 0x7b, 0x34, 0xe3, 0xce, 0x34, 0x3d, 0x5e, 0x31, 0xf1, 0x10, 0x62, 0x94, 0xb2,
	0xc6, 0xdf, 0x0a, 0x94, 0x6f, 0x50, 0x78, 0x77, 0x8f, 0x0c, 0xc3, 0x78, 0x16, 0x91, 0x9f, 0xa0,
	0x7a, 0x9f, 0xe4, 0x1e, 0xba, 0xbf, 0xcb, 0x62, 0xaa, 0xd4, 0x95, 0x66, 0xe9, 0xa8, 0xd2, 0x4a,
	0xab, 0x5b, 0xa7, 0x09, 0x64, 0x95, 0xa5, 0x48, 0xa6, 0xe4, 0x07, 0xd0, 0x1c, 0xee, 0x22, 0xfd,
	0x50, 0x57, 0x9a, 0xd5, 0xa3, 0xbd, 0xd6, 0x7a, 0xb2, 0xac, 0x79, 0xcb, 0xe0, 0x2e, 0x32, 0xa9,
	0x24, 0x3a, 0xa8, 0x7e, 0x38, 0xa6, 0x6a, 0x5d, 0x69, 0x16, 0x59, 0x12, 0x36, 0xbe, 0x05, 0x2d,
	0x39, 0x27, 0x25, 0xc8, 0x9b, 0xd7, 0x86, 0x71, 0x6e, 0x9a, 0x7a, 0x8e, 0x14, 0x40, 0xeb, 0x9c,
	0x74, 0x7b, 0xba, 0xd2, 0xf8, 0x4b, 0x01, 0x2a, 0x9b, 0x5d, 0xa0, 0xed, 0xa2, 0x30, 0x96, 0x1d,
	0x4e, 0xc4, 0x38, 0x24, 0xdf, 0x41, 0x65, 0x05, 0xac, 0xc7, 0x39, 0xca, 0xa1, 0x55, 0xb6, 0x09,
	0xc9, 0x17, 0xb0, 0xc3, 0x78, 0x1c, 0xb8, 0xb2, 0xab, 0xc6, 0xd2, 0x24, 0xa1, 0x3d, 0xbc, 0xc7,
	0x19, 0xd5, 0x52, 0x2a, 0x13, 0x72, 0x9c, 0x71, 0x3c, 0xb3, 0x23, 0x9b, 0xee, 0xc8, 0x35, 0x7c,
	0x5c, 0xae, 0xc1, 0x5a, 0xb0, 0x5b, 0x13, 0x23, 0xb6, 0xa9, 0x6a, 0xfc, 0x02, 0xfa, 0xaf, 0xfc,
	0x1e, 0x45, 0xe0, 0x63, 0x10, 0xf5, 0xd1, 0x1f, 0xa1, 0x20, 0x5f, 0xc2, 0xee, 0x80, 0xbb, 0xd8,
	0x3d, 0x93, 0x53, 0x15, 0xd9, 0x6b, 0x96, 0x34, 0xee, 0x06, 0x2e, 0x2e, 0xe4, 0xd6, 0x54, 0x96,
	0x26, 0x8d, 0x7f, 0x76, 0x80, 0xac, 0x2d, 0x0c, 0x1e, 0x44, 0xc2, 0x76, 0x22, 0x42, 0x21, 0x7f,
	0x3e, 0xe7, 0xce, 0xa4, 0xeb, 0x4a, 0x17, 0x8d, 0x2d, 0x53, 0x72, 0x00, 0x9a, 0xfc, 0xc9, 0xe9,
	0xee, 0x69, 0x66, 0xf7, 0x1b, 0xbf, 0x9e, 0x49, 0x15, 0xa9, 0x43, 0xc9, 0x88, 0x45, 0xdf, 0x5e,
	0xa4, 0xad, 0x55, 0xd9, 0x3a, 0x8b, 0xc8, 0x01, 0x7c, 0x32, 0xa7, 0xde, 0xdc, 0xf2, 0x7c, 0xe4,
	0x71, 0x64, 0x70, 0xdf, 0xf7, 0x22, 0xb9, 0x9b, 0x02, 0x7b, 0x7b, 0x40, 0xbe, 0x87, 0xaa, 0xc1,
	0x83, 0x3b, 0x6f, 0x6c, 0xe2, 0x1f, 0x31, 0x06, 0x0e, 0xd2, 0x5d, 0x39, 0xde, 0x16, 0x25, 0x65,
	0x50, 0x06, 0x34, 0x2f, 0x8f, 0x94, 0x41, 0x52, 0xd5, 0xf7, 0x82, 0xab, 0x98, 0x8b, 0xd8, 0xef,
	0x70, 0x71, 0xe5, 0xd0, 0x42, 0x5a, 0xb5, 0x49, 0xc9, 0x1e, 0x14, 0x0d, 0xdb, 0x99, 0xa0, 0xdb,
	0xc3, 0x80, 0x16, 0xa5, 0x64, 0x0d, 0xc8, 0x3e, 0xe8, 0x03, 0x5c, 0x44, 0xe6, 0x83, 0x17, 0x39,
	0x93, 0x0b, 0xf4, 0xc6, 0x93, 0x88, 0x82, 0x14, 0xbd, 0xe1, 0xa4, 0x01, 0x65, 0x4b, 0xd8, 0x41,
	0xe8, 0x45, 0xf2, 0x12, 0xd1, 0x92, 0xd4, 0x6d, 0xb0, 0xc4, 0x4f, 0x06, 0x83, 0xd8, 0xbf, 0x44,
	0x21, 0xf7, 0x4b, 0xcb, 0xa9, 0xdf, 0x36, 0x4f, 0xfc, 0x6e, 0xec, 0x99, 0xe7, 0xda, 0x11, 0x17,
	0x83, 0xd8, 0xa7, 0x95, 0xd4, 0x2f, 0xcb, 0xe4, 0x7c, 0xdc, 0xc5, 0x4b, 0xc1, 0xe7, 0x3c, 0xc4,
	0xf4, 0xea, 0x55, 0x5f, 0xe7, 0xdb, 0xe2, 0xe4, 0x18, 0xf2, 0xe9, 0x75, 0x09, 0xe9, 0xc7, 0xba,
	0xda, 0x2c, 0x1d, 0x7d, 0x93, 0xf9, 0x23, 0xb7, 0xaf, 0x14, 0x5b, 0x6a, 0xc9, 0xcf, 0x00, 0xab,
	0x96, 0x21, 0xd5, 0xdf, 0xaf, 0xcc, 0xc8, 0x89, 0x01, 0xd5, 0x64, 0x4f, 0x19, 0x83, 0x4f, 0xef,
	0x1b, 0x6c, 0x95, 0xec, 0x0f, 0xb6, 0x9e, 0x5e, 0xf2, 0x64, 0xcd, 0x61, 0x6f, 0x98, 0x3e, 0x5e,
	0xeb, 0xb4, 0x63, 0xe9, 0x4a, 0x12, 0xf5, 0x93, 0xe8, 0x03, 0x29, 0x43, 0xe1, 0x62, 0x68, 0x99,
	0xd6, 0x75, 0xa7, 0xa3, 0xab, 0x09, 0x67, 0x27, 0x1d, 0x4b, 0xd7, 0x48, 0x1e, 0xd4, 0xcb, 0xe1,
	0xad, 0x0e, 0xa7, 0xc3, 0x7f, 0x9f, 0x6b, 0xca, 0xd3, 0x73, 0x4d, 0xf9, 0xff, 0xb9, 0xa6, 0xfc,
	0xf9, 0x52, 0xcb, 0x3d, 0xbd, 0xd4, 0x72, 0xff, 0xbd, 0xd4, 0x72, 0xbf, 0x1d, 0x3b, 0x13, 0xdb,
	0x0b, 0x7c, 0x7b, 0x8a, 0xa2, 0xc5, 0xc5, 0xb8, 0xbd, 0x4e, 0x0f, 0x43, 0x77, 0x7a, 0x38, 0xe6,
	0xed, 0xf9, 0xa8, 0x2d, 0x3f, 0x6b, 0x63, 0xbe, 0xfe, 0x36, 0x8e, 0x76, 0x25, 0xfa, 0xf1, 0x73,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x1b, 0x4d, 0xec, 0x39, 0x05, 0x00, 0x00,
}

func (m *VerifyResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Code != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x10
	}
	if m.VerifiedBlock != nil {
		{
			size, err := m.VerifiedBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockHeaderConsensusArgs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderConsensusArgs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderConsensusArgs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ConsensusData != nil {
		{
			size, err := m.ConsensusData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConsensus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Level != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Round != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x18
	}
	if m.ConsensusType != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.ConsensusType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GovernmentMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernmentMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernmentMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.NodeID) > 0 {
		i -= len(m.NodeID)
		copy(dAtA[i:], m.NodeID)
		i = encodeVarintConsensus(dAtA, i, uint64(len(m.NodeID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GovernmentContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GovernmentContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GovernmentContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NextValidators) > 0 {
		for iNdEx := len(m.NextValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NextValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintConsensus(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if m.NodeProposeRound != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.NodeProposeRound))
		i--
		dAtA[i] = 0x70
	}
	if m.ValidatorNum != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.ValidatorNum))
		i--
		dAtA[i] = 0x68
	}
	if m.BlockNumPerEpoch != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.BlockNumPerEpoch))
		i--
		dAtA[i] = 0x60
	}
	if m.TransitBlock != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.TransitBlock))
		i--
		dAtA[i] = 0x58
	}
	if m.NextSwitchHeight != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.NextSwitchHeight))
		i--
		dAtA[i] = 0x50
	}
	if m.CachedLen != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.CachedLen))
		i--
		dAtA[i] = 0x48
	}
	if m.MinQuorumForQc != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.MinQuorumForQc))
		i--
		dAtA[i] = 0x40
	}
	if m.N != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.N))
		i--
		dAtA[i] = 0x38
	}
	if m.ConfigSequence != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.ConfigSequence))
		i--
		dAtA[i] = 0x30
	}
	if m.SkipTimeoutCommit {
		i--
		if m.SkipTimeoutCommit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.CurMaxIndex != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.CurMaxIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.EpochId != 0 {
		i = encodeVarintConsensus(dAtA, i, uint64(m.EpochId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintConsensus(dAtA []byte, offset int, v uint64) int {
	offset -= sovConsensus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerifyResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VerifiedBlock != nil {
		l = m.VerifiedBlock.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	if m.Code != 0 {
		n += 1 + sovConsensus(uint64(m.Code))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *BlockHeaderConsensusArgs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsensusType != 0 {
		n += 1 + sovConsensus(uint64(m.ConsensusType))
	}
	if m.Round != 0 {
		n += 1 + sovConsensus(uint64(m.Round))
	}
	if m.Level != 0 {
		n += 1 + sovConsensus(uint64(m.Level))
	}
	if m.ConsensusData != nil {
		l = m.ConsensusData.Size()
		n += 1 + l + sovConsensus(uint64(l))
	}
	return n
}

func (m *GovernmentMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.NodeID)
	if l > 0 {
		n += 1 + l + sovConsensus(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovConsensus(uint64(m.Index))
	}
	return n
}

func (m *GovernmentContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochId != 0 {
		n += 1 + sovConsensus(uint64(m.EpochId))
	}
	if m.Type != 0 {
		n += 1 + sovConsensus(uint64(m.Type))
	}
	if m.CurMaxIndex != 0 {
		n += 1 + sovConsensus(uint64(m.CurMaxIndex))
	}
	if m.SkipTimeoutCommit {
		n += 2
	}
	if m.ConfigSequence != 0 {
		n += 1 + sovConsensus(uint64(m.ConfigSequence))
	}
	if m.N != 0 {
		n += 1 + sovConsensus(uint64(m.N))
	}
	if m.MinQuorumForQc != 0 {
		n += 1 + sovConsensus(uint64(m.MinQuorumForQc))
	}
	if m.CachedLen != 0 {
		n += 1 + sovConsensus(uint64(m.CachedLen))
	}
	if m.NextSwitchHeight != 0 {
		n += 1 + sovConsensus(uint64(m.NextSwitchHeight))
	}
	if m.TransitBlock != 0 {
		n += 1 + sovConsensus(uint64(m.TransitBlock))
	}
	if m.BlockNumPerEpoch != 0 {
		n += 1 + sovConsensus(uint64(m.BlockNumPerEpoch))
	}
	if m.ValidatorNum != 0 {
		n += 1 + sovConsensus(uint64(m.ValidatorNum))
	}
	if m.NodeProposeRound != 0 {
		n += 1 + sovConsensus(uint64(m.NodeProposeRound))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovConsensus(uint64(l))
		}
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 2 + l + sovConsensus(uint64(l))
		}
	}
	if len(m.NextValidators) > 0 {
		for _, e := range m.NextValidators {
			l = e.Size()
			n += 2 + l + sovConsensus(uint64(l))
		}
	}
	return n
}

func sovConsensus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConsensus(x uint64) (n int) {
	return sovConsensus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerifyResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VerifiedBlock == nil {
				m.VerifiedBlock = &common.Block{}
			}
			if err := m.VerifiedBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= VerifyResult_Code(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockHeaderConsensusArgs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderConsensusArgs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderConsensusArgs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusType", wireType)
			}
			m.ConsensusType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConsensusType |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsensusData == nil {
				m.ConsensusData = &common.TxRWSet{}
			}
			if err := m.ConsensusData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernmentMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernmentMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernmentMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GovernmentContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GovernmentContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GovernmentContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochId", wireType)
			}
			m.EpochId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ConsensusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurMaxIndex", wireType)
			}
			m.CurMaxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurMaxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipTimeoutCommit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipTimeoutCommit = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigSequence", wireType)
			}
			m.ConfigSequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigSequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field N", wireType)
			}
			m.N = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.N |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinQuorumForQc", wireType)
			}
			m.MinQuorumForQc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinQuorumForQc |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CachedLen", wireType)
			}
			m.CachedLen = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CachedLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextSwitchHeight", wireType)
			}
			m.NextSwitchHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextSwitchHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransitBlock", wireType)
			}
			m.TransitBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransitBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumPerEpoch", wireType)
			}
			m.BlockNumPerEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumPerEpoch |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorNum", wireType)
			}
			m.ValidatorNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeProposeRound", wireType)
			}
			m.NodeProposeRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeProposeRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &GovernmentMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &GovernmentMember{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConsensus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConsensus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValidators = append(m.NextValidators, &GovernmentMember{})
			if err := m.NextValidators[len(m.NextValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConsensus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthConsensus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConsensus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConsensus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConsensus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConsensus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConsensus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConsensus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConsensus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConsensus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConsensus = fmt.Errorf("proto: unexpected end of group")
)
