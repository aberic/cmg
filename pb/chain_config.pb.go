// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: chain_config.proto

package pb

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId     string             `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`          // 链标识
	Version     string             `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`                         // 链版本
	AuthType    string             `protobuf:"bytes,3,opt,name=auth_type,json=authType,proto3" json:"auth_type,omitempty"`       // 认证类型
	Sequence    uint64             `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`                      // 序列号
	Crypto      *CryptoConfig      `protobuf:"bytes,5,opt,name=crypto,proto3" json:"crypto,omitempty"`                           // 算法配置
	Block       *BlockConfig       `protobuf:"bytes,6,opt,name=block,proto3" json:"block,omitempty"`                             // 区块配置
	Core        *CoreConfig        `protobuf:"bytes,7,opt,name=core,proto3" json:"core,omitempty"`                               // core配置
	Consensus   *ConsensusConfig   `protobuf:"bytes,8,opt,name=consensus,proto3" json:"consensus,omitempty"`                     // 共识配置
	TrustRoots  []*TrustRootConfig `protobuf:"bytes,9,rep,name=trust_roots,json=trustRoots,proto3" json:"trust_roots,omitempty"` // 联盟成员，联盟链配置初始成员；公链无需配置。key：节点标识；value：地址，节点公钥/CA证书
	Permissions []*Permission      `protobuf:"bytes,10,rep,name=permissions,proto3" json:"permissions,omitempty"`                // 权限配置
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{0}
}

func (x *ChainConfig) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *ChainConfig) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ChainConfig) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *ChainConfig) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ChainConfig) GetCrypto() *CryptoConfig {
	if x != nil {
		return x.Crypto
	}
	return nil
}

func (x *ChainConfig) GetBlock() *BlockConfig {
	if x != nil {
		return x.Block
	}
	return nil
}

func (x *ChainConfig) GetCore() *CoreConfig {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *ChainConfig) GetConsensus() *ConsensusConfig {
	if x != nil {
		return x.Consensus
	}
	return nil
}

func (x *ChainConfig) GetTrustRoots() []*TrustRootConfig {
	if x != nil {
		return x.TrustRoots
	}
	return nil
}

func (x *ChainConfig) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName string     `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"` // 方法名
	Principle    *Principle `protobuf:"bytes,2,opt,name=principle,proto3" json:"principle,omitempty"`                           // 权限
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{1}
}

func (x *Permission) GetResourceName() string {
	if x != nil {
		return x.ResourceName
	}
	return ""
}

func (x *Permission) GetPrinciple() *Principle {
	if x != nil {
		return x.Principle
	}
	return nil
}

type CryptoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // 是否需要开启交易时间戳校验
}

func (x *CryptoConfig) Reset() {
	*x = CryptoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CryptoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CryptoConfig) ProtoMessage() {}

func (x *CryptoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CryptoConfig.ProtoReflect.Descriptor instead.
func (*CryptoConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{2}
}

func (x *CryptoConfig) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

// 区块配置
type BlockConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxTimestampVerify bool   `protobuf:"varint,1,opt,name=tx_timestamp_verify,json=txTimestampVerify,proto3" json:"tx_timestamp_verify,omitempty"` // 是否需要开启交易时间戳校验
	TxTimeout         uint32 `protobuf:"varint,2,opt,name=tx_timeout,json=txTimeout,proto3" json:"tx_timeout,omitempty"`                           // 交易时间戳的过期时间(秒)
	BlockTxCapacity   uint32 `protobuf:"varint,3,opt,name=block_tx_capacity,json=blockTxCapacity,proto3" json:"block_tx_capacity,omitempty"`       // 区块中最大交易数
	BlockSize         uint32 `protobuf:"varint,4,opt,name=block_size,json=blockSize,proto3" json:"block_size,omitempty"`                           // 区块最大限制，单位MB
	BlockInterval     uint32 `protobuf:"varint,5,opt,name=block_interval,json=blockInterval,proto3" json:"block_interval,omitempty"`               // 出块间隔，单位:ms
}

func (x *BlockConfig) Reset() {
	*x = BlockConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockConfig) ProtoMessage() {}

func (x *BlockConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockConfig.ProtoReflect.Descriptor instead.
func (*BlockConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{3}
}

func (x *BlockConfig) GetTxTimestampVerify() bool {
	if x != nil {
		return x.TxTimestampVerify
	}
	return false
}

func (x *BlockConfig) GetTxTimeout() uint32 {
	if x != nil {
		return x.TxTimeout
	}
	return 0
}

func (x *BlockConfig) GetBlockTxCapacity() uint32 {
	if x != nil {
		return x.BlockTxCapacity
	}
	return 0
}

func (x *BlockConfig) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *BlockConfig) GetBlockInterval() uint32 {
	if x != nil {
		return x.BlockInterval
	}
	return 0
}

// core配置
type CoreConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxSchedulerTimeout         uint64 `protobuf:"varint,1,opt,name=tx_scheduler_timeout,json=txSchedulerTimeout,proto3" json:"tx_scheduler_timeout,omitempty"`                           // [0, 60] 交易调度器从交易池拿到交易后, 进行调度的时间
	TxSchedulerValidateTimeout uint64 `protobuf:"varint,2,opt,name=tx_scheduler_validate_timeout,json=txSchedulerValidateTimeout,proto3" json:"tx_scheduler_validate_timeout,omitempty"` // [0, 60] 交易调度器从区块中拿到交易后, 进行验证的超时时间
}

func (x *CoreConfig) Reset() {
	*x = CoreConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoreConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoreConfig) ProtoMessage() {}

func (x *CoreConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoreConfig.ProtoReflect.Descriptor instead.
func (*CoreConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{4}
}

func (x *CoreConfig) GetTxSchedulerTimeout() uint64 {
	if x != nil {
		return x.TxSchedulerTimeout
	}
	return 0
}

func (x *CoreConfig) GetTxSchedulerValidateTimeout() uint64 {
	if x != nil {
		return x.TxSchedulerValidateTimeout
	}
	return 0
}

// 共识配置
type ConsensusConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      ConsensusType   `protobuf:"varint,1,opt,name=type,proto3,enum=pb.ConsensusType" json:"type,omitempty"`     // 共识类型
	Nodes     []*OrgConfig    `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`                          // 节点机构列表
	ExtConfig []*KeyValuePair `protobuf:"bytes,3,rep,name=ext_config,json=extConfig,proto3" json:"ext_config,omitempty"` // 扩展字段，记录难度、奖励等其他类共识算法配置
}

func (x *ConsensusConfig) Reset() {
	*x = ConsensusConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusConfig) ProtoMessage() {}

func (x *ConsensusConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusConfig.ProtoReflect.Descriptor instead.
func (*ConsensusConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{5}
}

func (x *ConsensusConfig) GetType() ConsensusType {
	if x != nil {
		return x.Type
	}
	return ConsensusType_POW
}

func (x *ConsensusConfig) GetNodes() []*OrgConfig {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ConsensusConfig) GetExtConfig() []*KeyValuePair {
	if x != nil {
		return x.ExtConfig
	}
	return nil
}

// 机构配置
type OrgConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId   string   `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	Address []string `protobuf:"bytes,2,rep,name=address,proto3" json:"address,omitempty"` // 机构下的地址列表
}

func (x *OrgConfig) Reset() {
	*x = OrgConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgConfig) ProtoMessage() {}

func (x *OrgConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgConfig.ProtoReflect.Descriptor instead.
func (*OrgConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{6}
}

func (x *OrgConfig) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *OrgConfig) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

type TrustRootConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgId string `protobuf:"bytes,1,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"` // 组织名
	Root  string `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`                // root证书/公钥
}

func (x *TrustRootConfig) Reset() {
	*x = TrustRootConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chain_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrustRootConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrustRootConfig) ProtoMessage() {}

func (x *TrustRootConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chain_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrustRootConfig.ProtoReflect.Descriptor instead.
func (*TrustRootConfig) Descriptor() ([]byte, []int) {
	return file_chain_config_proto_rawDescGZIP(), []int{7}
}

func (x *TrustRootConfig) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *TrustRootConfig) GetRoot() string {
	if x != nil {
		return x.Root
	}
	return ""
}

var File_chain_config_proto protoreflect.FileDescriptor

var file_chain_config_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x70, 0x62, 0x1a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69,
	0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x03, 0x0a, 0x0b, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b,
	0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x62, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x31, 0x0a, 0x09,
	0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x12,
	0x34, 0x0a, 0x0b, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x73, 0x74,
	0x52, 0x6f, 0x6f, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5e, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x6e, 0x63, 0x69, 0x70, 0x6c, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xce, 0x01, 0x0a, 0x0b,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x13, 0x74,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x78, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x81, 0x01, 0x0a,
	0x0a, 0x43, 0x6f, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x74,
	0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x74, 0x78, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x41, 0x0a,
	0x1d, 0x74, 0x78, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x5f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x1a, 0x74, 0x78, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x22, 0x8e, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x62, 0x2e,
	0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x2f, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52, 0x09, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0x3c, 0x0a, 0x09, 0x4f, 0x72, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x15,
	0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x3c, 0x0a, 0x0f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x15, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x42, 0x21, 0x5a,
	0x1f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chain_config_proto_rawDescOnce sync.Once
	file_chain_config_proto_rawDescData = file_chain_config_proto_rawDesc
)

func file_chain_config_proto_rawDescGZIP() []byte {
	file_chain_config_proto_rawDescOnce.Do(func() {
		file_chain_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_chain_config_proto_rawDescData)
	})
	return file_chain_config_proto_rawDescData
}

var file_chain_config_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_chain_config_proto_goTypes = []interface{}{
	(*ChainConfig)(nil),     // 0: pb.ChainConfig
	(*Permission)(nil),      // 1: pb.Permission
	(*CryptoConfig)(nil),    // 2: pb.CryptoConfig
	(*BlockConfig)(nil),     // 3: pb.BlockConfig
	(*CoreConfig)(nil),      // 4: pb.CoreConfig
	(*ConsensusConfig)(nil), // 5: pb.ConsensusConfig
	(*OrgConfig)(nil),       // 6: pb.OrgConfig
	(*TrustRootConfig)(nil), // 7: pb.TrustRootConfig
	(*Principle)(nil),       // 8: pb.Principle
	(ConsensusType)(0),      // 9: pb.ConsensusType
	(*KeyValuePair)(nil),    // 10: pb.KeyValuePair
}
var file_chain_config_proto_depIdxs = []int32{
	2,  // 0: pb.ChainConfig.crypto:type_name -> pb.CryptoConfig
	3,  // 1: pb.ChainConfig.block:type_name -> pb.BlockConfig
	4,  // 2: pb.ChainConfig.core:type_name -> pb.CoreConfig
	5,  // 3: pb.ChainConfig.consensus:type_name -> pb.ConsensusConfig
	7,  // 4: pb.ChainConfig.trust_roots:type_name -> pb.TrustRootConfig
	1,  // 5: pb.ChainConfig.permissions:type_name -> pb.Permission
	8,  // 6: pb.Permission.principle:type_name -> pb.Principle
	9,  // 7: pb.ConsensusConfig.type:type_name -> pb.ConsensusType
	6,  // 8: pb.ConsensusConfig.nodes:type_name -> pb.OrgConfig
	10, // 9: pb.ConsensusConfig.ext_config:type_name -> pb.KeyValuePair
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_chain_config_proto_init() }
func file_chain_config_proto_init() {
	if File_chain_config_proto != nil {
		return
	}
	file_consensus_proto_init()
	file_request_proto_init()
	file_principle_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chain_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CryptoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoreConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chain_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrustRootConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chain_config_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chain_config_proto_goTypes,
		DependencyIndexes: file_chain_config_proto_depIdxs,
		MessageInfos:      file_chain_config_proto_msgTypes,
	}.Build()
	File_chain_config_proto = out.File
	file_chain_config_proto_rawDesc = nil
	file_chain_config_proto_goTypes = nil
	file_chain_config_proto_depIdxs = nil
}
